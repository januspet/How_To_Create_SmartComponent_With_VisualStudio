<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.Robotics.RobotStudio</name>
    </assembly>
    <members>
        <member name="T:Sp.Agent.SpAgent">
            <summary>
            This portion of the partial class provides a PermutationId-neutral way of 
            being able to access SpAgent.AgentContext from anywhere within the Application.
            This is used by other code across the NuGet-based Configuration packages as necessary.
            </summary>
            <summary>
            This portion of the partial offers as many hints as possible to users and tooling that <c>Equals</c> and <c>ReferenceEquals</c> have no part to play in normal usage of the APIs.
            </summary>
            <summary>
            This portion of the partial class implements core functionality to check the correct Initialization of Stores in 
            order to verify that the environmental prerequisites of the Software Potential Components are present and correct.
            </summary>
            <remarks>
            One should always add a call to <c>SpAgent.Configuration.VerifyStoresInitialized()</c> to your Application 
            environment's Entrypoint.
            </remarks>
            <summary>
            This portion of the partial class implements a static constructor that will ensure the correct initialization of 
            the Agent and Product Contexts [in the correct sequence] implicitly as a side effect of calling methods such as 
            <c>SpAgent.Configuration.VerifyStoresInitialized()</c>
            </summary>
            <summary>
            This portion of the partial class allows one to wire in a Product Customization without referring directly to the Product Identity or Permutation Ids.
            </summary>
            <remarks>
            The default implementation is intended to give an example of how the configuration chain looks like.
            As-is, it has a null effect - i.e. it just requests default behaviors for almost everything.
            ([Assuming you haven't added any customizations,] This file and the code within it can actually be 
            deleted as omitting any configuration just defaults all behaviors)
            </remarks>
            <summary>
            <para>This portion of the partial class implements a <c>SpAgent.Configuration.InitializeSharedLicenseStorage()</c> 
            method that should be invoked under the control of an Installer running under Elevated privilege.</para>
            
            <para>See <c>.WithApplicationInitializedStore()</c> for further details.</para>
            </summary>
            <summary>
            This portion of the partial class customizes the Storage aspect of the 
            Agent Context Configuration to have license data be maintained in a shared 
            storage area that is initialized by the application (under the control
            of an installer process running Elevated.)
            </summary>
            <remarks>
            The <c>ConfigureStorageBasePath()</c> and <c>ConfigureStorageRelativePath()</c> 
            partial methods must be implemented to provide the specific path to be used.
            </remarks>
            <summary>
            This portion of the partial class has some helper methods that are used to enable the packages to give earlier 
            warning and/or disambiguated explanations of issues that are likely to crop up at runtime due to the specific 
            values emanating from your Application-specific implementations of ConfigureStorageBasePath() and/or ConfigureStorageRelativePath().
            </summary>
            <remarks>The sanity check methods are intentionally rendered inert in Release builds via a <c>ConditionalAttribute</c> 
            on the basis that you the developer should already have encountered any potential issues during the development process.
            </remarks>
            <summary>
            This portion of the partial class:
            - exposes two partial methods which are typically implemented in a dependent package (see above for examples).
            - provides helpers that invoke the extensions (or throw if no such implementation is present)
            </summary>
             <summary>
             This portion of the partial class customizes the Storage aspect of 
             the Agent Context Configuration to maintain the license storage in a 
             shared location so that multiple Users on a given Machine can share the 
             access they afford.
             
             By default, this are is under Program Data (e.g. <c>C:\ProgramData\MyCompany\MyProduct\MyVersion</c>)
             
             NB THIS LOCATION MUST BE CREATED AND INITIALIZED BY AN INSTALLER 
             RUNNING ELEVATED PRIOR TO RUNNING YOUR APPLICATION ON A GIVEN MACHINE.
             </summary>
             <remarks>
             See <c>SoftwarePotential.Configuration.Local.SingleUser</c> if you 
             need to address this restriction [by using the user profile and accepting 
             the restriction that licenses cannot be used across multiple user 
             profiles on a given machine].
            
             The <c>ConfigureStorageBasePath()</c> and <c>ConfigureStorageRelativePath()</c> 
             partial methods must both be implemented to together provide the specific path to be used.
             </remarks>
            <summary>
            This portion of the partial class plugs into the ConfigureDistributor extension 
            point of the SoftwarePotential.Configuration Package and in turn provides a 
            (mandatory) ConfigureStaticDistributorDiscovery extension point.
            </summary>
            <summary>
            This portion of the partial class uses the Storage configured via the
            SoftwarePotential.Configuration.(Multi|Single)User Package's ConfigureStorage()
            implementation to maintain a setting within an area that the Application 
            will be able to write to regardless of which user is active.
            </summary>
            <remarks>
            see https://support.softwarepotential.com/hc/en-us/articles/115001365849--SingleUser-Configuration-README
            or https://support.softwarepotential.com/hc/en-us/articles/115001380105-Multi-User-Configuration-README
            for further information about Sp.Agent's storage mechanisms
            </remarks>
        </member>
        <member name="P:Sp.Agent.SpAgent.Product">
            <summary>
            <para>Provides access to locally managed Licensing resources associated with the NuGet Product package you have installed.</para>
            </summary>
        </member>
        <member name="T:Sp.Agent.SpAgent.Configuration">
            <summary>
            <para>Provides access to APIs relevant to the configuration of Software Potential integration.</para>
            <para>Typically should not be used outside of your application's configuration code.</para>
            </summary>
            <summary>
            <para>Provides access to APIs relevant to the configuration of Software Potential integration.</para>
            <para>Typically should not be used outside of your application's configuration code.</para>
            </summary>
            <summary>
            <para>Provides access to APIs relevant to the configuration of Software Potential integration.</para>
            <para>Typically should not be used outside of your application's configuration code.</para>
            </summary>
            <summary>
            <para>Provides access to APIs relevant to the configuration of Software Potential integration.</para>
            <para>Typically should not be used outside of your application's configuration code.</para>
            </summary>
            <remarks>This section manages Distributor-specific configuration information.</remarks>
        </member>
        <member name="P:Sp.Agent.SpAgent.Configuration.AgentContext">
            <summary>
            Low-level access to the IAgentContext. In normal usage it should never be necessary to access this directly; each relevant configurable item is exposed as a Configure* partial method on <see cref="T:Sp.Agent.SpAgent"/>.
            </summary>
        </member>
        <member name="M:Sp.Agent.SpAgent.Configuration.VerifyStoresInitialized">
            <summary>
            Should be called once from Main/your entrypoint before running any Licensed 
            or Protected code or calling Licensing APIs (e.g. Activation)
            <para>Ideally the work involved in this should take place on a background thread 
            in parallel with other initialization activities.</para>
            <para>NB depending on the store type involved, it may be necessary to call <c>SpAgent.Configuration.InitializeSharedLicenseStorage()</c> or similar as part of one's installation sequence.</para>
            </summary>
            <remarks>NB Calling the method has the important side effect of Initializing the configurations (see static constructor below)</remarks>
        </member>
        <member name="P:Sp.Agent.SpAgent.Configuration.StoresInitialization">
            <remarks>NB Calling the method has the critical side effect of Initializing the Agent Context and Product Context configurations [via the static constructor of SpAgent]</remarks>
        </member>
        <member name="M:Sp.Agent.SpAgent.Configuration.InitializeSharedLicenseStorage">
            <summary>
            <para>Configure the shared license storage - NB needs to run Elevated, i.e. via an Administrator Command Prompt or an Installer.</para>
            <para>NB You should not call SpAgent.Configuration.VerifyStoresInitialized() before this method.</para>
            <para/>
            <para>NB Your installer needs to ensure this gets called based on one of the following outline approaches:</para>
            <list type="table">
            <item><para>
            <para>APPROACH A: USE MANAGED INSTALLER CLASS AND INVOKE IT (ELEVATED) FROM YOUR INSTALLATION TOOL/SCRIPT</para>
            <para>There is a standard .NET Managed Installer class called SpAgentInstaller in SpAgent.Local.MultiUser.Installer.cs which will call SpAgentConfiguration.InitializeSharedLicenseStorage().</para>
            <para>Have your Installer / installation batch file run the Managed Installer by either</para>
            <para>1. Configuring it to run Managed Installers in this Assembly.</para>
            <para>   (Installer products (e.g. InstallShield) have built in menu options to run managed installers.)</para>
            <para>2. Invoking INSTALLUTIL.EXE from within your Installer /installation batch file e.g. 
            <para>    {Microsoft.NET folder}\installutil.exe {this Assembly path.exe}</para></para>
            </para></item>
            <item><para>
            <para>APPROACH B: ADD AN INSTALLATION COMMANDLINE OPTION AND CALL IT (ELEVATED) FROM YOUR INSTALLATION TOOL/SCRIPT</para>
            <para>1. Add a commandline option to your Application's Main()/entry point (i.e., call <c>SpAgent.CommandLineProcessing.ProcessInstallationArgs(args)</c>) that will, when the commandline option is supplied:</para>
            <para>   a. call SpAgentConfiguration.InitializeSharedLicenseStorage()</para>
            <para>   b. exit to allow the rest of the installation to complete (i.e. the application should exit immediately)</para>
            <para>2. Make the Installer / installation batch file trigger it once as the app is being deployed/installed</para>
            <para>   i.e. Run (ELEVATED/As Admin) '"{this Assembly path}" -INSTALL'</para>
            <para>AT DEVELOPMENT TIME (ONLY) (IF YOU RUN VISUAL STUDIO ELEVATED), you could set up a post build step to perform this initialization (i.e. set the Post Build Event Command line as:</para>
            <para>      <c>"$(TargetPath)" -Install</c></para>
            </para></item>
            </list>
            </summary>
            <remarks>
            <para>NB the 'StoreInitialization' portion of the code triggers a call to AgentConfiguration.Configure which should not be removed.</para>
            </remarks>
        </member>
        <member name="P:Sp.Agent.SpAgent.Configuration.DistributorBaseUri">
            <summary>
            Gets or sets the Base Uri for the Distributor from which Resources are to be obtained.
            </summary>
        </member>
        <member name="T:Sp.Agent.SpAgent.CommandLineProcessing">
            <summary>
            <para>Provides standardized processing of Licensing-related command-line parameters.</para>
            <para>To be invoked from your application's entry point.</para>
            </summary>
            <summary>
            <para>Provides standardized processing of Licensing-related command-line parameters.</para>
            <para>To be invoked from your application's entry point.</para>
            </summary>
            <remarks>
            This portion of the partial class allows one to customize whether/how 
            messages from the command line processing logic will be emitted to a Console.
            It is safe to delete this class, though the absence of messages may make 
            error diagnosis more difficult.
            </remarks>
            <summary>
            <para>Provides standardized processing of Licensing-related command-line parameters.</para>
            <para>To be invoked from your application's entry point.</para>
            </summary>
            <remarks>This portion offers facilities relevant to Distributor-aware applications.</remarks>
        </member>
        <member name="M:Sp.Agent.SpAgent.#cctor">
            <summary>
            The Sp.Agent Configuration calls should execute once and only once; exactly what a static constructor does.
            </summary>
            <remarks>
            Note that VerifyStoresInitialized() (and SpAgentInstallation.InitializeSharedLicenseStorage)
            is housed in this class to benefit from the implicit thread safe call to this on first hit.
            In other words, be careful if moving stuff out of here.
            </remarks>
        </member>
        <member name="M:Sp.Agent.SpAgent.ShouldSkipConfiguration(Sp.Agent.Configuration.IAgentContext)">
            <summary>
            Implements policy detailed in comments on ConfigureMultipleSpAgentsPerPermutation().
            </summary>
            <param name="agentContext"></param>
            <returns></returns>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureLocalBoundStorage(System.Action{System.Func{Sp.Agent.Configuration.IAgentCommenceConfigurationPhase,Sp.Agent.Configuration.IAgentHardwareBoundStorageConfigurationPhase}})">
            <summary>
            <para>Uses <c>WithApplicationInitializedStore</c> from the Sp.Agent.Local extension 
            to nominate a path that will be appropriately Initialized at the correct time.</para>
            <para>see <c>WithApplicationInitializedStore</c> for further information.</para>
            </summary>
            <remarks>
            <para>Slots into the extension point exposed by the SoftwarePotential.Configuration 
            package in its SpAgent.Configuration.cs file.</para>
            <para>It should not be necessary to modify this code - the bodies of 
            <c>ConfigureStorageBasePath()</c> and <c>ConfigureStorageRelativePath()</c> 
            can be adjusted as necessary.</para>
            </remarks>
            <exception cref="T:Sp.Agent.Storage.StorageInaccessibleException">Thrown at runtime should the supplied overall path not be present and accessible when required (e.g., if no initialization step via <c>SpAgent.Configuration.InitializeSharedLicenseStorage()</c> has been triggered).</exception>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureDistributor(System.Action{System.Func{Sp.Agent.Configuration.IAgentDistributorsConfigurationPhase,Sp.Agent.Configuration.IAgentEmbeddedLicensesConfigurationPhase}})">
            <summary>
            Implements the extension point, delegating to <c>ConfigureStaticDistributorDiscovery</c>.
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureProduct(Sp.Agent.IProductContext)">
            <summary>
            
            <para>TODO: YOUR CUSTOMIZATIONS OR DELETE THIS METHOD</para>
            
            <para>Should be edited as appropriate if you wish to customize any aspects of how your Licensing policies should affect your application</para>
            </summary>
            <remarks>
            NB the name and namespace of the class needs to remain as-is in order for partial method to slot into the code in SpAgent.cs correctly
            </remarks>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureAgent(Sp.Agent.Configuration.IAgentContext)">
            <summary>
            Applies a <c>IAgentContext.Configure()</c> Fluent Configuration Expression gathered via the relevant helpers for each link in the chain.
            Each portion is gathered via associated <c>Configure</c>* <c>partial</c> methods, so it should not be necessary to adjust the implementation here.
            </summary>
        </member>
        <member name="M:Sp.Agent.SpAgent.FetchStorageConfigurationSequenceOrThrow">
            <summary>
            Yields an <c>IAgentConfiguration.Configure()</c> Fluent Configuration Sequence Segment for the 
            Storage Configuration aspect (or throws if and incomplete or ambiguous set of <c>ConfigureStorage()</c> / <c>ConfigureLocalBoundStorage()</c> / <c>ConfigureRemovableStorage()</c>c> partial methods are in place).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if none of: <c>ConfigureStorage()</c>, <c>ConfigureLocalBoundStorage()</c> or <c>ConfigureRemovableStorage()</c> (that correctly invoke their argument) are in place.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if both a <c>ConfigureStorage()</c> method and one or more of <c>ConfigureLocalBoundStorage()</c> / <c>ConfigureRemovableStorage()</c> have rendered the configuration ambiguous.</exception>
        </member>
        <member name="P:Sp.Agent.SpAgent.DistributorsConfigurationSequenceOrNullObject">
            <summary>
            Yields an <c>IAgentConfiguration.Configure()</c> Fluent Configuration Sequence Segment for the 
            Distributors Configuration aspect (or provides a default that disables Distributor access if no correctly 
            implemented <c>ConfigureDistributor()</c> partial method is in place).
            </summary>
        </member>
        <member name="P:Sp.Agent.SpAgent.EmbeddedLicensesConfigurationSequenceOrNullObject">
            <summary>
            Yields an <c>IAgentConfiguration.Configure()</c> Fluent Configuration Sequence Segment for the 
            Embedded Licenses Configuration aspect (or provides a default that auto-detects the presence of Embedded Licenses 
            if no correctly implemented <c>ConfigureEmbeddedLicenses()</c> partial method is in place).
            </summary>
        </member>
        <member name="M:Sp.Agent.SpAgent.SetProxyConfigurationPolicy(System.Uri)">
            <summary>
            <param name="activationEndpoint">
            The Activation Service endpoint used to submit Activation Requests.
            </param>
            <para>
            Replace the contents of this method to return a proxy to be used at activation.
            Return null if you do not wish to set a proxy.
            </para>
            </summary>
            <example>
            If targeting full framework, you can detect the address of the default proxy for the activation endpoint
            and return a proxy for this address with default credentials; you return NULL if no proxy assigned:
            <code>
            static IWebProxy SetProxyConfigurationPolicy( Uri activationEndpoint )
            {
            	var proxiedAddress = WebRequest.DefaultWebProxy.GetProxy( activationEndpoint );
            	if ( !activationEndpoint.Equals( proxiedAddress ) )
            		return new WebProxy( proxiedAddress ) { UseDefaultCredentials = true };
            	else
            		return null;
            }
            </code>
            </example>
        </member>
        <member name="M:Sp.Agent.SpAgent.SetDeviceLabelPolicy(Sp.Agent.Configuration.Product.Activation.IActivationDeviceLabelContext)">
            <summary>
            <param name="context">
            <para>Context that allows you to set a custom Device Label</para>
            </param>
            Replace the contents of this method to customize the value of the DeviceLabel sent up on Activation.
            If this method is left unmodified the DeviceLabel will be set to the default value of Environment.MachineName
            </summary>
        </member>
        <member name="M:Sp.Agent.SpAgent.SanityCheckRelativePathIfDebugBuild(System.String,System.String,System.String)">
            <summary>
            <para>The implementation below is intentionally conservative in nature 
            as we believe it is worth considering the License Storage path to use for your software carefully.</para>
            <para>The key concern is that the implementation needs to consistently produce a stable result on a 
            given machine in order for the system to correctly pick up installed licenses on subsequent executions.</para>
            </summary>
            <param name="vendor">Your Internal vendor name as used in the Software Potential Service.</param>
            <param name="product">Your Internal Product Definition name.</param>
            <param name="version">Your Internal Product Definition version.</param>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfiguredExternallyManagedRootPath">
            <summary>
            <para>Composes a complete path to a license store directory from invocations of ConfigureStorageBasePath() 
            and ConfigureStorageRelativePath() (see <c>ConfiguredBaseAndRelativePathElements()</c> for details).</para>
            <para>Typically, this is useful when such a location is created and permissioned externally such as during application deployment (i.e. by an installer) or by the Application Hosting Environment (e.g., ASP.NET's App_Data).</para>
            </summary>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfiguredBaseAndRelativePathElements">
            <summary>
            Returns a license store location consisting of 2 parts:
            <list type="bullet">
            <item><description>base path - license store root path, which can be shared between applications</description></item>
            <item><description>relative path - when combined with base path, yields a combined result that is unique per application.</description></item></list>
            See <c>ConfigureStorageBasePath()</c> and <c>ConfigureStorageRelativePath()</c> for details of the relevant extensibility points.
            </summary>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureStorageBasePath(System.Action{System.String})">
            <summary>
            Must be implemented to provide a path to the base directory 
            within which the Licensing System is to maintain its licenses.
            
            The default implementation uses a standard Windows Shared Data 
            area, which typically results in a path like <c>C:\ProgramData</c>.
            When combined with the result from ConfigureStorageRelativePath(),
            this yields a path which can be shared across users yet be isolated 
            to your Application.
            
            See the documentation for <c>WithApplicationInitializedStore()</c> in 
            <c>Sp.Agent.Local</c> and <c>MultiUserStorageStrategy</c> for further detail.
            </summary>
            <param name="configure">delegate that must be invoked to accept the configured value.</param>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureStorageRelativePath(System.String,System.String,System.String,System.Action{System.String})">
             <summary>
             Must be implemented to provide a subdirectory layout to be used 
             within the shared area supplied via <c>ConfigureStorageBasePath()</c>.
             
             The default implementation uses your Software Potential Vendor 
             and Product name strings to provide a unique subfolder path.
            
             When combined with the result from ConfigureStorageBasePath(), 
             this typically results in a path such as:
             <c>C:\ProgramData\MyCompany\MyProduct\MyVersion</c>.
             
             See the documentation for <c>WithApplicationInitializedStore()</c> in 
             <c>Sp.Agent.Local</c> and <c>MultiUserStorageStrategy</c> for further detail.
             </summary>
             <param name="configure">delegate that must be invoked to accept the configured value.</param>
            <param name="vendor">The vendor name as specified in your Software Potential account registration.</param>
            <param name="product">The product name as specified in your Software Potential product definition.</param>
            <param name="version">The product version as specified in your Software Potential product definition.</param>
        </member>
        <member name="M:Sp.Agent.SpAgent.ConfigureStaticDistributorDiscovery(System.Action{System.Func{System.Uri}})">
            <summary>
            <para>Partial method enabling specification of an appropriate Distributor Discovery Algorithm via a partnering partial class.</para>
            <para>Typically an implementation of this is provided via a SoftwarePotential.Configuration.Distributor package (or dependent).</para>
            </summary>
            <param name="configure">
            <para>delegate that accepts the <c>WithDiscovery</c> Configuration segment of a <c>IAgentDistributorsConfigurationPhase.WithDistributor()</c> Fluent Configuration sequence.</para>
            <para><example>See the code emitted by <c>SoftwarePotential.Configuration.Distributor</c>.</example></para>
            </param>
        </member>
        <member name="P:Sp.Agent.SpAgent.Distributors">
            <summary>
            <para>Provides access to Distributor connectivity and service health diagnostics facilities.</para>
            <para>To adjust configuration, see <see cref="T:Sp.Agent.SpAgent.Configuration"/>. For access to configured resources, use <see cref="P:Sp.Agent.SpAgent.Distributed"/>.</para>
            </summary>
        </member>
        <member name="P:Sp.Agent.SpAgent.Distributed">
            <summary>
            <para>Provides APIs necessary for building a Distributor-aware application using the NuGet <see cref="P:Sp.Agent.SpAgent.Product"/> package you have installed.</para>
            <para>To adjust configuration, see <see cref="T:Sp.Agent.SpAgent.Configuration"/>. To verify service health or connectivity use <see cref="P:Sp.Agent.SpAgent.Distributors"/>.</para>
            </summary>
        </member>
        <member name="T:Sp.Agent.Permutation6E3db.Identifiers">
            <summary>
            Identifiers associated with the 'ABB' Software Potential Permutation
            </summary>
        </member>
        <member name="F:Sp.Agent.Permutation6E3db.Identifiers.ShortCode">
            <summary>
            5 digit short code as used by <c>Sp.Agent.Configuration.AgentContext.For( string )</c>
            </summary>
        </member>
        <member name="T:Sp.Agent.AgentConfigurationExtensions">
            <summary>
            Offers a set of extension methods allowing one to decompose an <c>IAgentContext.Configure()</c> Fluent Configuration 
            Expression Sequence into individual elements yet retain the familiar fluent expression nature.
            </summary>
        </member>
        <member name="M:Sp.Agent.AgentConfigurationExtensions.WithStorageConfiguration(Sp.Agent.Configuration.IAgentCommenceConfigurationPhase,System.Func{Sp.Agent.Configuration.IAgentCommenceConfigurationPhase,Sp.Agent.Configuration.IAgentDistributorsConfigurationPhase})">
            <summary>
            Applies a delegate in place of having a statically bound expression in a <c>IAgentContext.Configure()</c> 
            Fluent Configuration Expression Sequence for the Storage Configuration aspect of the Agent Configuration.
            </summary>
        </member>
        <member name="M:Sp.Agent.AgentConfigurationExtensions.WithDistributorConfiguration(Sp.Agent.Configuration.IAgentDistributorsConfigurationPhase,System.Func{Sp.Agent.Configuration.IAgentDistributorsConfigurationPhase,Sp.Agent.Configuration.IAgentEmbeddedLicensesConfigurationPhase})">
            <summary>
            Applies a delegate in place of having a statically bound expression in a <c>IAgentContext.Configure()</c> 
            Fluent Configuration Expression Sequence for the Distributor Configuration aspect of the Agent Configuration.
            </summary>
        </member>
        <member name="M:Sp.Agent.AgentConfigurationExtensions.WithEmbeddedLicensesConfiguration(Sp.Agent.Configuration.IAgentEmbeddedLicensesConfigurationPhase,System.Func{Sp.Agent.Configuration.IAgentEmbeddedLicensesConfigurationPhase,Sp.Agent.Configuration.IAgentCompletedConfigurationPhase})">
            <summary>
            Applies a delegate in place of having a statically bound expression in a <c>IAgentContext.Configure()</c> 
            Fluent Configuration Expression Sequence for the Embedded Licenses Configuration aspect of the Agent Configuration.
            </summary>
        </member>
        <member name="T:Sp.Agent.Installers.SpAgentInstaller">
            <summary>
            <para>This Managed Installer class is responsible for doing the correct preparation of the license store when triggered (by installutil.exe or an Installation tool that supports the invocation of Managed Installers).</para>
            <para>See also the comments in SpAgent.Configuration.Local.MultiUser.Installation.cs and the documentation for <c>.WithApplicationInitializedStore()</c> for further details.</para>
            <para>NB must be run Elevated (as Administrator).</para>
            </summary>
        </member>
        <member name="M:Sp.Agent.Installers.SpAgentInstaller.Install(System.Collections.IDictionary)">
            <summary>
            Implements an installation-time hook to initialize (and share) the license storage.
            </summary>
        </member>
        <member name="T:Sp.Agent.MultiUserStorageStrategy">
            <summary>
            Manages the storage of files in a location within the OS appropriate shared program data folder.
            On Windows this is ProgramData
            On Linux based OS' this is /usr/share/
            On OSX this is /Library/Application Support/
            </summary>
            <remarks>
            Default permissioning of these folders is such that data 
            maintained within the area is owned by CREATOR OWNER. As license upgrades 
            etc. may take place in the context of a different Windows User Profile,
            we need to ensure that the folder is appropriately reconfigured such that
            other users can rewrite or delete licenses as necessary.
            </remarks>
        </member>
        <member name="P:Sp.Agent.MultiUserStorageStrategy.ProgramDataFolderPath">
            <summary>
            Obtains the ProgramData path for this machine / OS.
            </summary>
            <value>On windows same as <c>%ProgramData%</c>, e.g., <c>C:\ProgramData</c>. Mac returns /Library/Application Support/. Linux returns /usr/share/</value>
        </member>
        <member name="M:Sp.Agent.MultiUserStorageStrategy.InitializeDirectory(System.IO.DirectoryInfo)">
            <summary>
            Used by ConfigureLocalBoundStorage() in SpAgent.Configuration.Local.MultiUser.cs 
            to create and/or adjust the permissions of a Directory to ensure it is 
            a) present 
            b) has the sharing permission rules added
            </summary>
            <remarks>
            Typically this algorithm does not require customization as it as 
            proven to work correctly across a variety of target deployment 
            platforms.
            </remarks>
            <param name="directoryInfo">The directory to be prepared.</param>
        </member>
        <member name="P:Sp.Agent.MultiUserStorageStrategy.UsersLocalGroupSid">
            <summary>
            Yields SID associated with NT Local Group 'Users'.
            </summary>
        </member>
        <member name="T:Sp.Agent.Distributor.AppSettingsHelpers.WritableConfigurationFile">
            <summary>
            Encapsulates opening (and/or creating and seeding) of a <c>Sp.Agent.Distributor.dll.config</c> 
            file that will be maintained outside of an application's <c>app.config</c> file.
            </summary>
        </member>
        <member name="F:Sp.Agent.Distributor.AppSettingsHelpers.WritableConfigurationFile.RuntimeConfigFilename">
            <summary>
            The name of the config file. As all programmatic access is to be gated 
            through this class, this should not need to be externally known.
            </summary>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.WritableConfigurationFile.OpenOrCreateEmpty(System.String)">
            <summary>
            Opens the file. If the file is not present, places valid stub content there first.
            </summary>
            <param name="configDirectory">The folder within which the file is to be maintained. Should have appropriate sharing privileges such that all users under whose control the application may need to be reconfigured will have access to write files within it.</param>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.WritableConfigurationFile.Open(System.IO.FileInfo)">
            <summary>
            Opens the file. Will fail if the file is not present.
            </summary>
            <param name="runtimeConfigFile">The folder within which the file is stored.</param>
        </member>
        <member name="T:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorConfiguration">
            <summary>
            Manages opening a Distributor Configuration file from either app.config or a standalone file.
            </summary>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorConfiguration.OpenStandaloneFile(System.IO.FileInfo)">
            <summary>
            Accesses [in read/write mode] the BaseUri setting maintained the specified <paramref name="file" />.
            </summary>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorConfiguration.FromAppConfig">
            <summary>
            Accesses [in read-only mode] the BaseUri setting maintained externally in the application's <c>app.config</c> file.
            </summary>
        </member>
        <member name="T:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorAppSettings">
            <summary>
            Manages access to an <c>configuration/appSetting/Sp.Agent.Distributor.BaseUri</c> entry in an Application Configuration file.
            </summary>
            <remarks>
            This class handles the reading aspect only. For writing support, see <see cref="T:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentWritableDistributorAppSettings"/>.
            </remarks>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorAppSettings.#ctor(System.Configuration.Configuration)">
            <summary>
            Creates an instance referring to the supplied <see cref="T:System.Configuration.Configuration"/>.
            </summary>
        </member>
        <member name="P:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorAppSettings.ConfigSettingName">
            <summary>
            The setting name the class uses.
            </summary>
            <value>
            <c>Sp.Agent.Distributor.BaseUri</c>
            </value>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorAppSettings.ReadBaseUriOrDefault">
            <summary>
            Extracts the Configured Uri. Throws if the data is not a valid Uri.
            </summary>
            <returns>The configured <see cref="T:System.Uri"/> or <c>null</c> if no entry is present.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setting is not a valid <see cref="T:System.Uri"/>.</exception>
        </member>
        <member name="P:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorAppSettings.Filepath">
            <summary>
            The absolute path of the Configuration file we are reading from. 
            </summary>
            <remarks>
            (works regardless of whether we are a .exe.config or a standalone file)
            </remarks>
        </member>
        <member name="T:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentWritableDistributorAppSettings">
            <summary>
            Manages reading or writing a <c>configuration/appSetting/Sp.Agent.Distributor.BaseUri</c> entry in an Application Configuration file.
            </summary>
            <remarks>
            This class handles the writing aspect (the base class, <see cref="T:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentDistributorAppSettings"/> handles the reading).
            </remarks>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentWritableDistributorAppSettings.#ctor(System.Configuration.Configuration)">
            <summary>
            Creates an instance. The supplied <paramref name="configuration"/> must be writable.
            </summary>
            <param name="configuration">Configuration. Must be writable.</param>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.SpAgentWritableDistributorAppSettings.UpdateBaseUri(System.Uri)">
            <summary>
            Updates the setting in the associated <see cref="T:System.Configuration.Configuration"/>.
            </summary>
        </member>
        <member name="T:Sp.Agent.Distributor.AppSettingsHelpers.WriteThroughCachedValue`1">
            <summary>
            Caches the (non-<c>null</c> value of writable property. All <c>set</c> operations are expected to be 
            passed through the cache too in order to ensure the <c>get</c> will yield a consistent result.
            </summary>
            <typeparam name="T">The type of value to be cached.</typeparam>
        </member>
        <member name="M:Sp.Agent.Distributor.AppSettingsHelpers.WriteThroughCachedValue`1.#ctor(System.Action{`0},System.Func{`0})">
            <summary>
            Initializes the caching object given a pair of reading/writing delegates.
            </summary>
        </member>
        <member name="P:Sp.Agent.Distributor.AppSettingsHelpers.WriteThroughCachedValue`1.Value">
            <summary>
            The value being managed.
            </summary>
        </member>
        <member name="T:Sp.Agent.ConfigurationFolderExtensions">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Sp.Agent.ConfigurationFolderExtensions.GetConfigurationFolder(Sp.Agent.IProductContext,System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.AddinCommunication.AddinSharedDataStore">
            <summary>
            ABB internal use only
            </summary>
            <ignore/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AddinCommunication.AddinSharedDataStore.Id">
            <summary>
            Id of this data store
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AddinCommunication.AddinSharedDataStore.Connect(System.String)">
            <summary>
            Connects to the data store with the given id, creating it if needed
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AddinCommunication.AddinSharedDataStore.Item(System.String)">
            <summary>
            Stores or retreives data in this store
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.AddinCommunication.AddinCommunicationChannel">
            <summary>
            ABB internal use only
            </summary>
            <ignore/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AddinCommunication.AddinCommunicationChannel.#ctor(System.String,System.String)">
            <summary>
            Creates a new communication channel client.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AddinCommunication.AddinCommunicationChannel.ClientId">
            <summary>
            Returns the client ID that was used to create this object
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AddinCommunication.AddinCommunicationChannel.OnMessageReceived(System.String,System.String,System.Object)">
            <summary>
            Override this to receive messages from other clients connected to the same channel
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AddinCommunication.AddinCommunicationChannel.SendAsync(System.String,System.Object)">
            <summary>
            Sends a message to other clients on the same channel
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AddinCommunication.AddinCommunicationChannel.Post(System.String,System.Object)">
            <summary>
            Sends a message without waiting for a response 
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger">
            <summary>
            Contains methods to add information to the internal application log,
            which can be used by support personnel to determine the cause of an application error.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.#ctor">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.CurrentLogFile">
            <summary>
            Returns the location of the log file for the current session.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogThread(System.String,System.Boolean)">
            <summary>
            Adds a message when a thread starts or ends.
            </summary>
            <param name="thread">Name of the thread</param>
            <param name="start">Indicates if the thread is starting (true) or ending (false)</param>
            <remarks>Call this method from the thread in question.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogInfo(System.String)">
            <summary>
            Adds a general message to the log.
            </summary>
            <param name="message">Message to add</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogState(System.String,System.String)">
            <summary>
            Sets a named state in the log.
            </summary>
            <param name="state">State to set</param>
            <param name="message">Message regarding the state, or empty string to clear the state.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogError(System.String)">
            <summary>
            Adds an error message and flushes the log to disk.
            </summary>
            <param name="message">Message to add</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.Exception)">
            <summary>
            Adds an exception error message and flushes the log to disk. Also adds the message to the Logger.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.Exception,System.Boolean)">
            <summary>
            Adds an exception error message and flushes the log to disk.
            </summary>
            <param name="ex">Exception</param>
            <param name="toOutput">True to also add a message to the Logger</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.String,System.Exception)">
            <summary>
            Adds an exception error message and flushes the log to disk.
            </summary>
            <param name="message">Message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.String,System.Exception,System.Boolean)">
            <summary>
            Adds an exception error message and flushes the log to disk.
            </summary>
            <param name="message">Message</param>
            <param name="ex">Exception</param>
            <param name="toOutput">True to also add a message to the Logger</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogExceptionOnce(System.String,System.Exception,System.Boolean)">
            <summary>
            Adds an exception error message and flushes the log to disk, unless an equivalent
            exception has already been logged.
            </summary>
            <param name="message">Message</param>
            <param name="ex">Exception</param>
            <param name="toOutput">True to also add a message to the Logger</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogExceptionOnce(System.Exception,System.Boolean)">
            <summary>
            Adds an exception error message and flushes the log to disk, unless an equivalent
            exception has already been logged.
            </summary>
            <param name="ex">Exception</param>
            <param name="toOutput">True to also add a message to the Logger</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.AttributeCollection">
            <summary>
            Represents a collection of Attributes attached to a ProjectObject. Attributes are stored as a key/value pair.
            Keys can be assoicated with a Guid. A key with a Guid can only be removed by a client that knows the Guid.
            </summary>
            <remarks>Add-Ins should consider associating attribute keys with a Guid to make sure that the attribute is not removed by accident by another Add-In.
            To avoid conflicts with attribute keys defined by RobotStudio or other Add-Ins, prefix the key with the Add-In name.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.Item(System.String)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="key">The key of the item to get.</param>
            <exception cref="T:System.ArgumentException">
            The key value is not in the collection.</exception>
            <value>The item at the specified key.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index value is greater than the number of items in the collection.</exception>
            <value>The item at the specified index.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Add(System.Guid,System.String,System.Object)">
            <summary>
            Adds a protected attribute to this AttributeCollection object.
            A protected attribute can only be modified or removed if the access id used when creating it is known.
            </summary>
            <param name="accessId">The access id.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be associated with key. The following types are allowed: <see cref="T:System.Int32" />, <see cref="T:System.Int16" />, <see cref="T:System.Double" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /></param>
            <exception cref="T:System.ArgumentException">
            The key is protected by an access id.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Add(System.String,System.Object)">
            <summary>
            Add an attribute to this AttributeCollection object.
            </summary>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be associated with key, see remarks.</param>
            <exception cref="T:System.ArgumentException">The key is protected by a access id.</exception>
            <exception cref="T:System.NotSupportedException">The value type is not supported.</exception>
            <exception cref="T:System.NullReferenceException">An array may not contain values ​​of null.</exception>
            <remarks>
            Add-Ins should prefix attribute keys with the Add-In name to avoid conflicts with other Add-Ins. For example the Add-In "CompanyABCAddIn" that stores a lenght value as an attribute could use a key named "CompanyABCAdd.Length".
            The following types are allowed for the value argument and arrays of these types:
            <see cref="T:System.Int32" />, <see cref="T:System.Int16" />, <see cref="T:System.Double" />, <see cref="T:System.Boolean" />,
            <see cref="T:System.Single" />, <see cref="T:System.String" />, <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />,
            <see cref="T:ABB.Robotics.Math.Matrix4" />, <see cref="T:ABB.Robotics.Math.Vector3" />, <see cref="T:ABB.Robotics.Math.Vector4" />
            The matrix must be rigid.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Remove(System.Guid,System.String)">
            <summary>
            Removes a protected attribute from this AttributeCollection object.
            </summary>
            <param name="accessId">The access id that was specified when the attribute was added.</param>
            <param name="key">The key of the attribute to be removed.</param>
            <exception cref="T:System.ArgumentException">
            An attribute with the specified key has not been added to the collection or
            the key is protected by an access id.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Remove(System.String)">
            <summary>
            Removes an attribute from this AttributeCollection object.
            </summary>
            <param name="key">The key of the attribute to be removed.</param>
            <exception cref="T:System.ArgumentException">
            An attribute with the specified key has not been added to the collection or
            the key is protected by an access id.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.GetAttributeKeys">
            <summary>
            Returns all keys in the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.HasAttributeAccessId(System.String)">
            <summary>
            Check if a key has a accessId connected.
            </summary>
            <returns>
            True if key has a accessId.
            </returns>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.ContainsAttributeKey(System.String)">
            <summary>
            Determines if the <b>AttributeCollection</b> contains a specific key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.TryGetValue(System.String,System.Object@)">
            <summary>Gets the value with the specified key.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, null.</param>
            <returns>true if the AttributeCollection contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">key is a null reference or empty.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.TryGetValue``1(System.String,``0@)">
            <summary>Gets the value with the specified key.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, null.</param>
            <returns>true if the AttributeCollection contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">key is a null reference or empty.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the keys in the <b>AttributeCollection</b>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the AttributeCollection.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.CopyTo(System.Attribute[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">Destionation array</param>
            <param name="index">The zero-based index in targetArray at which copying begins.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index
            </summary>
            <param name="array">Destination Array</param>
            <param name="index">The zero-based index in targetArray at which copying begins</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.CompressorInfo">
            <summary>
            Contains information about a specific compressor (codec)
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CompressorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.CompressorInfo"/> class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.CompressorInfo.Name">
            <summary>
            The name of the codec, such as H264 or WMV3
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.CompressorInfo.Description">
            <summary>
            Description of the compressor.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CompressorInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.CustomProjectObject">
            <summary>
            Base class for custom ProjectObject derived classes.
            </summary>
            <remarks>
            In order for persistence to work properly, the static RegisterType() method must be called once
            for each derived type. Any persistent and/or undoable data should be stored in the Attributes collection.
            Call the SetParent() method to make the object part of an existing station.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CustomProjectObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CustomProjectObject.#ctor(ABB.Robotics.RobotStudio.LoadContext)">
            <summary>
            Constructor called when the object is created by the persistence system.
            </summary>
            <param name="ctx">The context (document) into which the object is loaded.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CustomProjectObject.RegisterType(System.String,System.Type)">
            <summary>
            Registers a <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject"/> type for persistence.
            </summary>
            <param name="id">A string that uniquely identifies the type.</param>
            <param name="type">The type derived from <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject"/> to register.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CustomProjectObject.RegisterType``1(System.String)">
            <summary>
            Registers a <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject"/> type for persistence.
            </summary>
            <typeparam name="T">The type derived from <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject"/> to register.</typeparam>
            <param name="id">A string that uniquely identifies the type.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LoadContext">
            <summary>
            Identifies the context (document) of a loaded <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject"/>
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DefaultCustomProjectObject">
            <summary>
            Fallback implementation of CustomProjectObject used when the saved type 
            does not exist (is not registered)
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.DataRecorderBase.Tick"/> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs"/> class.
            </summary>
            <param name="time">Time in seconds</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs.Time">
            <summary>
            Gets the current time in seconds.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderBase">
            <summary>
            A data recorder collects data from all its souces, and distributes it to its sinks.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderBase.Tick">
            <summary>
            Raised for each time step.
            </summary>
            <remarks>
            The definition of a time step is dependant on the implementation.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.Sources">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase"/> objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderBase.FindSignal(System.String)">
            <summary>
            Gets the signal with a specified identifier.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.Sinks">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.IsRecording">
            <summary>
            Returns true if recording is started.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderBase.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderBase.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.CurrentTime">
            <summary>
            Returns the current time in seconds.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderBase.RaiseTick(ABB.Robotics.RobotStudio.DataRecorderTickEventArgs)">
            <summary>
            Raises the <see cref="E:ABB.Robotics.RobotStudio.DataRecorderBase.Tick"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SignalDataType">
            <summary>
            Specifies the data type of a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalDataType.Unknown">
            <summary>
            The type of data is unspecified
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalDataType.Number">
            <summary>
            The data consists of numeric values
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalDataType.Bit">
            <summary>
            The data consists of bit values (1 or 0)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalDataType.String">
            <summary>
            The data consist of string values
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SignalInterpolationType">
            <summary>
            Specifies the type of interpolation for a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalInterpolationType.None">
            <summary>
            The data is not numeric.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalInterpolationType.Continuous">
            <summary>
            The data should be interpolated.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SignalInterpolationType.Discrete">
            <summary>
            The data should be treated as discrete values.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo">
            <summary>
            Represents information such as data type and quantity of a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal"/>
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo"/> object.
            </summary>
            <param name="dataType"></param>
            <param name="interpolationType"></param>
            <param name="tag"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo"/> object.
            </summary>
            <param name="dataType"></param>
            <param name="interpolationType"></param>
            <param name="tag"></param>
            <param name="approximateMin"></param>
            <param name="approximateMax"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo"/> object.
            </summary>
            <param name="dataType"></param>
            <param name="interpolationType"></param>
            <param name="tag"></param>
            <param name="approximateMin"></param>
            <param name="approximateMax"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,ABB.Robotics.RobotStudio.BuiltinQuantity,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo"/> object.
            </summary>
            <param name="dataType"></param>
            <param name="interpolationType"></param>
            <param name="tag"></param>
            <param name="quantity"></param>
            <param name="approximateMin"></param>
            <param name="approximateMax"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,ABB.Robotics.RobotStudio.BuiltinQuantity,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo"/> object.
            </summary>
            <param name="dataType"></param>
            <param name="interpolationType"></param>
            <param name="tag"></param>
            <param name="quantity"></param>
            <param name="approximateMin"></param>
            <param name="approximateMax"></param>
            <param name="description"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.Description">
            <summary>
            Gets a description of the signal
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.DataType">
            <summary>
            Gets or sets the type of the signal data
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.InterpolationType">
            <summary>
            Gets or sets how the signal data should be interpolated
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.Tag">
            <summary>
            Gets or sets a string that contains data about the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.ApproximateMin">
            <summary>
            Gets or sets the expected minimum value of the signal data.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.ApproximateMax">
            <summary>
            Gets or sets the expected maximum value of the signal data.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.Quantity">
            <summary>
            Gets or sets the quantity of the signal data.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSignal">
            <summary>
            Represents a piece of information that can be recorder by a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderBase">DataRecorder</see>
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.Equals(System.String)">
            <summary>
            Checks if this signal has a specified identifier.
            </summary>
            <param name="id">Identifier</param>
            <returns>True if <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id"/> is equal to the supplied identifier.</returns>
            <remarks>The comparison is case sensitive.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id">
            <summary>
            Gets a string that uniquely identifies the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.InitialValue">
            <summary>
            Gets or sets an initial value of the signal data.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.DisplayPath">
            <summary>
            Returns a user-friendly path.
            </summary>
            <remarks>
            The display path may contain a path element with a "#" character followed by a unique identifier. This element
            is not part of the actual path and must be filtered before use. The element indicates an identifier to separate
            objects with same name.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.SourceId">
            <summary>
            Gets the unique identifier of the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase"/> whence the signal originates.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Info">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo"/> that provides information about the signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.GetParametersFromPath(System.String)">
            <summary>
            Splits the <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id"/> or <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.DisplayPath"/> of a signal into its individual parts.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.GetPathFromParameters(System.String[])">
            <summary>
            Constructs a signal <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id"/> or <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.DisplayPath"/> from individual parts.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSignalCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal"/> objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Add(ABB.Robotics.RobotStudio.DataRecorderSignal)">
            <summary>
            Adds a signal to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Clear">
            <summary>
            Removes all signals from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Contains(ABB.Robotics.RobotStudio.DataRecorderSignal)">
            <summary>
            Determines whether the collection contains a specific signal.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.CopyTo(ABB.Robotics.RobotStudio.DataRecorderSignal[],System.Int32)">
            <summary>
            Copies all signals in the collection to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Count">
            <summary>
            Gets the number of signals in the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Remove(ABB.Robotics.RobotStudio.DataRecorderSignal)">
            <summary>
            Removes a signal from the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Item(System.String)">
            <summary>
            Gets the item with the specified signal url.
            </summary>
            <param name="signal">The ID of the item to get.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Contains(System.String)">
            <summary>
            Gets if the collection contains a signal with the specified identifier.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Remove(System.String)">
            <summary>
            Removes the signal with the specified identifier.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase">
            <summary>
            Base class for a data recorder sink, which will get notified when signals subscribed by the data recorder is updated.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Equals(System.String)">
            <summary>
            Returns true if this sink has the specified <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Id"/>.
            </summary>
            <remarks>The comparison is case sensitive.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.DataRecorder">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderBase"/> that contains this sink.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Signals">
            <summary>
            Gets the collection of signals that this sink subscribes to.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkBase.EnabledChanged">
            <summary>
            Occurs when the Enabled property value has changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Id">
            <summary>
            A string that uniquely identifies the sink
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.DisplayName">
            <summary>
            Localized display name for the sink
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkBase.DataAdded">
            <summary>
            Raised when new data is received by this sink.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Enabled">
            <summary>
            Gets or sets if this sink is enabled, e.g. will receive any signal data.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.UIVisible">
            <summary>
            Gets or sets a value that indicates if this sink should be visible in a user interface.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase2">
            <summary>
            Base class for a data recorder sink, which will get notified when signals subscribed by the data recorder is updated.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkAddedEventArgs">
            <summary>
            Provides data for the DataRecorderSinkAdded event of the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkAddedEventArgs.Sink">
            <summary>
            Gets the added sink.
            </summary>
            <value>
            The added <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase"/>.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkRemovedEventArgs">
            <summary>
            Provides data for the DataRecorderSinkRemoved event of the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkRemovedEventArgs.Sink">
            <summary>
            Gets the removed sink.
            </summary>
            <value>
            The removed <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase"/>.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase"/> objects.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.DataRecorderSinkRemoved">
            <summary>
            Occurs when a sink has been removed from the collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.DataRecorderSinkAdded">
            <summary>
            Occurs when a sink has been added to the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Add(ABB.Robotics.RobotStudio.DataRecorderSinkBase)">
            <summary>
            Adds a sink to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Clear">
            <summary>
            Removes all sinks from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Contains(ABB.Robotics.RobotStudio.DataRecorderSinkBase)">
            <summary>
            Gets if the collection contains a specific sink.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.CopyTo(ABB.Robotics.RobotStudio.DataRecorderSinkBase[],System.Int32)">
            <summary>
            Copies all sinks in the collection to an array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Count">
            <summary>
            Returns the number of sinks in the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Remove(ABB.Robotics.RobotStudio.DataRecorderSinkBase)">
            <summary>
            Removes a sink from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Item(System.String)">
            <summary>
            Gets the sink with the specified identifier.
            </summary>
            <param name="id">The identifier of the item to get.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Contains(System.String)">
            <summary>
            Gets if the collection contains a sink with the specified identifier.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult">
            <summary>
            Provides information about the 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.DataRecorderSignal})">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult"/> class.
            </summary>
            <param name="failedSubscribedSignals"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult.FailedSubscribedSignals">
            <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal"/> objects for which subscription to signal data has failed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase">
            <summary>
            A data recorder source provides information to a data recorder.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.DataRecorder">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderBase"/> that contains this source.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceBase.Equals(System.String)">
            <summary>
            Returns true if this source has the specified <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.Id"/>.
            </summary>
            <remarks>The comparison is case sensitive.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.DisplayName">
            <summary>
            Localized display name for the source
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.Id">
            <summary>
            A string that uniquely identifies the source.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceBase.GetSignals">
            <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal"/> objects that this source provides.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceBase.GetImageKey(System.String)">
            <summary>
            Gets a string that identifies an image that represents this source in a user interface.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceBaseAsync">
            <summary>
            A <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase"/> that supports asynchronous operations for subscribing and unsubscribing signals.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceAddedEventArgs">
            <summary>
            Provides data for the DataRecorderSourceAdded event of the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceAddedEventArgs.Source">
            <summary>
            Gets the added source.
            </summary>
            <value>
            The added <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase"/>.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceRemovedEventArgs">
            <summary>
            Provides data for the DataRecorderSourceRemoved event of the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceRemovedEventArgs.Source">
            <summary>
            Gets the removed source.
            </summary>
            <value>
            The removed <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase"/>.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase"/> objects.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.DataRecorderSourceRemoved">
            <summary>
            Occurs when a source has been removed from the collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.DataRecorderSourceAdded">
            <summary>
            Occurs when a source has been added to the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Add(ABB.Robotics.RobotStudio.DataRecorderSourceBase)">
            <summary>
            Adds a source to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Clear">
            <summary>
            Removes all sources from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Contains(ABB.Robotics.RobotStudio.DataRecorderSourceBase)">
            <summary>
            Gets if the collection contains a specific source.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.CopyTo(ABB.Robotics.RobotStudio.DataRecorderSourceBase[],System.Int32)">
            <summary>
            Copies all sources in the collection to an array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Count">
            <summary>
            Returns the number of sources in the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Remove(ABB.Robotics.RobotStudio.DataRecorderSourceBase)">
            <summary>
            Removes a source from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Item(System.String)">
            <summary>
            Gets the source with the specified identifier.
            </summary>
            <param name="id">The identifier of the item to get.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Contains(System.String)">
            <summary>
            Gets if the collection contains a source with the specified identifier.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProgressNotification">
            <summary>
            Represents the method that will handle progress notification callbacks.
            Some time consuming methods provides a progress notification callback, and accepts this delegate as an argument.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs" /> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.CollectionChangedEventHandler">
            <summary>
            Represents the method that will handle the <b>Changed</b> event for various collections.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.CollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SectionChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Options.SectionChanged"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.SectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectChangedEventHandler">
            <summary>
            Represents the method that will handle the <b>ProjectObjectChanged</b>event of a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectFileLockedEventHandler">
            <summary>
            Represents the method that will handle the <b>ProjectFileLocked</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.AutoSaveAvailableEventHandler">
            <summary>
            Represents the method that will handle the <b>AutoSaveAvailable</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventHandler">
            <summary>
            Represents the method that will handle the <b>ReferencedProjectFileNotFound</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventHandler">
            <summary>
            Represents the method that will handle the <b>ReferencedProjectFileNotSame</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventHandler">
            <summary>
            Represents the method that will handle the <b>ProjectObjectRemoved</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SavingProjectEventHandler">
            <summary>
            Represents the method that will handle the <b>Saving</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectFileEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Project.BeforeLoadProjectFile"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageAddedEventHandler">
            <summary>
            Represents the method that will handle the <b>LogMessageAdded</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" /> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageRemovedEventHandler">
            <summary>
            Represents the method that will handle the <b>LogMessageRemoved</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" /> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageActivatedEventHandler">
            <summary>
            Represents a method that will handle activated log messages.
            </summary>
            <param name="sender">The object where the event was invoked.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SelectionEventHandler">
            <summary>
            Represents a method that will handle the <see cref="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectAdded"/> and <see cref="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectRemoved"/> events.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DocumentInfo">
            <summary>
            This class gives access to document properties such as title, comments, preview etc.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Title">
            <summary>
            Title of the document
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Author">
            <summary>
            Author of the document
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Revision">
            <summary>
            The document revision
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Comments">
            <summary>
            Comments for the document
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Type">
            <summary>
            The type of document
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.SaveVersion">
            <summary>
            Returns the product version used to save the document
            </summary>
            <remarks>
            Will return null if the save version is unknown.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.History">
            <summary>
            Gets a list of <see cref="T:ABB.Robotics.RobotStudio.DocumentHistoryEntry"/> for the document.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Preview">
            <summary>
            Gets or sets a preview <see cref="T:System.Drawing.Image"/> of the document
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DocumentInfo.FromFileAsync(System.String)">
            <summary>
            Creates a read-only DocumentInfo containing the document properties
            for a project file. This method runs asynchronously.
            </summary>
            <remarks>
            This call requires exclusive access to the file during its execution. If the file is open,
            the call will return null.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DocumentInfo.FromFile(System.String)">
            <summary>
            Creates a read-only DocumentInfo containing the document properties
            for a project file
            </summary>
            <remarks>
            This call requires exclusive access to the file during its execution. If the file is open,
            the call will return null.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.DocumentHistoryEntry">
            <summary>
            Additional document properties for a specific point in time.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.DocumentHistoryEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DocumentHistoryEntry"/> object
            </summary>
            <param name="comments"></param>
            <param name="user"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentHistoryEntry.Time">
            <summary>
            The time that the document was revised
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentHistoryEntry.User">
            <summary>
            The user that made the revision
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.DocumentHistoryEntry.Comments">
            <summary>
            Comments regarding the revision
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectChangeType">
            <summary>
            Specifies in which way a project object has changed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Children">
            <summary>
            Child objects have been added or removed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Parent">
            <summary>
            The Parent of the object has changed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Transform">
            <summary>
            The object position and/or orientation has changed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Name">
            <summary>
            The name of the object has changed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Other">
            <summary>
            Any other object property has changed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.UndoRedo">
            <summary>
            Previous changes have been undone or redone.
            Any property might be affected.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.UIVisible">
            <summary>
            The UIVisible property has changed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectType">
            <summary>
            Specifies the type of a <see cref="T:ABB.Robotics.RobotStudio.Project"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectType.Station">
            <summary>
            The project is a <b>Station</b>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectType.Library">
            <summary>
            The project is a <b>GraphicComponentLibrary</b>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectType.Unknown">
            <summary>
            The project type is unknown
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LicenseType">
            <summary>
            Specifies the type of a license
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseType.Standalone">
            <summary>
            Standalone, node-locked license
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseType.Floating">
            <summary>
            Floating, server-based license
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LicenseHoldType">
            <summary>
            Specifies how an acquired license is released.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseHoldType.None">
            <summary>
            The license is released immediately.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseHoldType.AllowRelease">
            <summary>
            The license can be released manually.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseHoldType.DenyRelease">
            <summary>
            The license is held until the application exits.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.CancelUndoStepType">
            <summary>
            Specifies how to cancel an undo step.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.CancelUndoStepType.Clear">
            <summary>
            The undo queue is cleared, but the changes in the undo step are retained.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.CancelUndoStepType.Rollback">
            <summary>
            All changes in the undostep are discarded.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageSeverity">
            <summary>
            Specifies the severity of a log message.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LogMessageSeverity.Information">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LogMessageSeverity.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LogMessageSeverity.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SelectionReason">
            <summary>
            Reasons for why an object was added to a <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" />.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SelectionReason.None">
            <summary>
            No reason was specified.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SelectionReason.ObjectCreated">
            <summary>
            The object has been newly created.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SelectionReason.Browser">
            <summary>
            The object was selected in a browser.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.SelectionReason.Graphics">
            <summary>
            The object was selected in the graphics.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.BuiltinQuantity">
            <summary>
            Specifies the quantities which are supported.
            </summary>
            <remarks>
            This enumeration is for internal use and for use by the designer.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.None">
            <summary>
            No quantity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Velocity">
            <summary>
            Velocity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Acceleration">
            <summary>
            Acceleration
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.AngularVelocity">
            <summary>
            Angular velocity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Inertia">
            <summary>
            Inertia
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Power">
            <summary>
            Power
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Energy">
            <summary>
            Energy
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Mass">
            <summary>
            Mass
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Quaternion">
            <summary>
            Quaternion
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Force">
            <summary>
            Force
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Elasticity">
            <summary>
            Elasticity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.AngularElasticity">
            <summary>
            Angular Elasticity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Pressure">
            <summary>
            Pressure
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Torque">
            <summary>
            Torque
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.RecorderState">
            <summary>
            Specifies the different states that the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder" /> can be in.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.RecorderState.Recording">
            <summary>
            The recorder is recording.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.RecorderState.Paused">
            <summary>
            The recording is paused.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.RecorderState.Stopped">
            <summary>
            The recorder is not running.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat">
            <summary>
            Specifies the different output file formats supported by the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder" />.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat.Avi">
            <summary>
            This format is no longer supported.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat.Wmv">
            <summary>
            Windows Media Video. This format will be removed in a future version of RobotStudio.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat.Mp4">
            <summary>
            MPEG-4
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.CollectionConflictPolicy">
            <summary>
            Specifies what to do when adding an item to a collection, if an equivalent item (e.g. same name) already exists in the collection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.CollectionConflictPolicy.KeepBoth">
            <summary>
            Keep the existing item and add the new item. This is the default behavior.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.CollectionConflictPolicy.ReplaceExisting">
            <summary>
            Replace the existing item with the new item.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.CollectionConflictPolicy.KeepExisting">
            <summary>
            Keep the existing item and don't add the new item.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.CollectionConflictPolicy.ThrowException">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/>
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectFormat">
            <summary>
            Represents the storage format of a <see cref="T:ABB.Robotics.RobotStudio.Project"/> (station or component library).
            Also determines the folder structure created by <see cref="M:ABB.Robotics.RobotStudio.Solution.Create(System.String,System.String,ABB.Robotics.RobotStudio.ProjectFormat)"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectFormat.SingleFile">
            <summary>
            The station, assets and metadata are stored in a single compressed file.
            </summary>
            <remarks>
            Should not be used when creating a new project.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectFormat.Folder">
            <summary>
            The station is stored in an xml file with assets and metadata in separate files.
            The solution structure is compatible with RobotStudio Cloud.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.AutoSaveAvailable" /> event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs.FileName">
            <summary>
            Gets the path to the file that is being loaded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs.LoadAutoSaveData">
            <summary>
            Gets or sets if auto saved data load.
            </summary> 
            <value>
            If set to true, detected auto saved data will be loaded. If set to false, the originally specified project file will be loaded.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates if the load should be canceled.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.CollectionChangedEventArgs">
            <summary>
            Provides data for the <b>Changed</b> event on various collections.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.CollectionChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.CollectionChangedEventArgs"/>.
            </summary>
            <remarks>
            Internal ABB use only.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.CollectionChangedEventArgs.FirstAffectedIndex">
            <summary>
            Gets the zero-based index of the first object that was added or removed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ExceptionEventArgs">
            <summary>
            Provides data for events such as <b>DocumentProvider.Error</b>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ExceptionEventArgs"/> object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ExceptionEventArgs.Exception">
            <summary>
            Gets or sets the thrown exception
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageAdded" /> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs.Message">
            <summary>
            Gets the added message.
            </summary>
            <value>
            The added <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/>.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs.BringToFront">
            <summary>
            Indicates whether the output window should be brought to the foreground then the message is added.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageRemoved" /> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs.Message">
            <summary>
            Gets the removed message.
            </summary>
            <value>
            The removed <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/>.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs.RemoveFromOutput">
            <summary>
            Indicates if the message should be removed from the Output view.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated" /> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
            <remarks>
            If the <see cref="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Handled"/> property is not True when all event handlers have executed and the <see cref="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Message"/> property is a base <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> type RobotStudio will handle it with the default implementation.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.#ctor(ABB.Robotics.RobotStudio.LogMessage)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs"/> object.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Message">
            <summary>
            The message that has been activated.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Handled">
            <summary>
            If no event handler sets this to True RobotStudio will handle activation with default implementation.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectFileEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.BeforeLoadProjectFile"/> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectFileEventArgs.FileName">
            <summary>
            Gets the path to the file that is being loaded.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.ProjectFileLocked" /> event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs.FileName">
            <summary>
            Gets the name of the locked project file.
            </summary> 
            <value>
            The full path to the locked project file.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs.UserName">
            <summary>
            Gets the name of the user who owns the process that has locked the file.
            </summary> 
            <value>
            The user who has locked the file.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs.Cancel">
            <summary>
            Gets or sets if the operation causing the event shall be canceled.
            </summary> 
            <value>
            True to cancel the operation that caused the even, false to continue.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.ProjectObject.ProjectObjectChanged" /> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.NativeObject">
            <summary>
            ABB internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.ChangedObject">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> that has changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.ChangeType">
            <summary>
            Gets the type of change.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs">
            <summary>
            Provides data for events of type <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventHandler" />.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            ABB internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old property value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new property value.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.ProjectObjectRemoved" /> event of the <see cref="P:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs.Project" />.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs.RemovedObject">
            <summary>
            Gets the object that has been removed.
            </summary> 
            <value>
            The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> that has been removed from the <b>Project</b>.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs.Project">
            <summary>
            Gets the <b>Project</b> from which to object was removed.
            </summary> 
            <value>
            The object that has been removed from the project.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.ReferencedProjectFileNotFound" /> event
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.#ctor(ABB.Robotics.RobotStudio.ProjectType,System.String)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs"/> object.
            </summary>
            <param name="containingType"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.FileName">
            <summary>
            Gets the name of the project file that could not be found.
            </summary> 
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.ContainingProjectType">
            <summary>
            Gets the type of the project that references the missing file, e.g. the project being loaded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates if the load (of the referencing project) should be canceled.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.CompletionTask">
            <summary>
            Gets or sets a Task that completes when an asynchronous event handler is finished.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.ReferencedProjectFileNotSame" /> event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs.FileName">
            <summary>
            Gets the name of the project file which is not the same as last time.
            </summary> 
            <value>
            The name of the project file which now refers to another project than it did when the referencing project was saved.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs.ContainingProjectType">
            <summary>
            Gets the type of the referenced project being loaded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates if the load (of the referencing project) should be canceled.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SavingProjectEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.Saving" /> event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SavingProjectEventArgs.FileName">
            <summary>
            Gets the file name of the saving project.
            </summary> 
            <value>
            The file name of project currently beeing saved.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SectionChangedEventArgs">
            <summary>
            Provides data for the Options.SectionChanged event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SectionChangedEventArgs.Section">
            <summary>
            Gets the name of the section that has changed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SelectionEventArgs">
            <summary>
            Provides data for the ProjectSelection.ObjectAdded and ProjectSelection.ObjectRemoved events.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SelectionEventArgs.SelectionObject">
            <summary>
            Gets the object that was added or removed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SelectionEventArgs.Reason">
            <summary>
            Gets the reason for the object being added or removed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectVersionEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.ProjectFileDifferentVersion"/> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectVersionEventArgs.SaveVersion">
            <summary>
            Gets the application version (see <see cref="P:ABB.Robotics.RobotStudio.RobotStudioAPI.Version"/>) that was used to save the file.
            </summary>
            <remarks>
            Will return "1.0" if the file is from an older version that lacks this information.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectVersionEventArgs.Compatible">
            <summary>
            Gets a value that indicates if the file format is compatible with the current version.
            </summary>
            <remarks>
            If true, the file can be loaded but any content not recognized by this version will be discarded.
            If false and <see cref="P:ABB.Robotics.RobotStudio.ProjectVersionEventArgs.SaveVersion"/> is newer than <see cref="P:ABB.Robotics.RobotStudio.RobotStudioAPI.Version"/>, the file cannot be loaded and an <see cref="T:System.OperationCanceledException"/> will be raised.
            If false and <see cref="P:ABB.Robotics.RobotStudio.ProjectVersionEventArgs.SaveVersion"/> is older than <see cref="P:ABB.Robotics.RobotStudio.RobotStudioAPI.Version"/>, the user should be notified that compatibility will be broken by saving the file.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectVersionEventArgs.FileName">
            <summary>
            Gets the name and path of the file being loaded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectVersionEventArgs.ProjectType">
            <summary>
            Gets the type of project file being loaded, typically "Station" or "ComponentLibrary".
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ToolControlTearOffEventArgs">
            <summary>
            ABB internal use.
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ToolControlTearOffEventArgs.SourceControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that should be replicated in a tear-off window.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ExceptionLogMessage">
            <summary>
            A log message representing an <see cref="T:System.Exception"/>.
            </summary>
            <remarks>
            When the user double-clicks the message in the Output window the
            exception text is shown.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ExceptionLogMessage"/> object.
            </summary>
            <param name="text"></param>
            <param name="category"></param>
            <param name="ex"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ExceptionLogMessage"/> object.
            </summary>
            <param name="text"></param>
            <param name="ex"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ExceptionLogMessage.Exception">
            <summary>
            Gets the <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.GetErrorString">
            <summary>
            Returns a string containing the aggregated stack traces and exception messages of the associated exception, and its inner exceptions.
            This method is intended for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ExceptionLogMessage.CanActivate">
            <summary>
            Indicates if this message can be double-clicked to display more information.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.HostedAddInBase">
            <summary>
            Base class for a PowerPac type add-in.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.#ctor">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.HostedAddInBase"/>.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.HostedAddInBase.InternalDeactivated">
            <summary> ABB internal use </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.InternalActivate">
            <summary> ABB internal use </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.InternalDeactivate">
            <summary> ABB internal use </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.Deactivate">
            <summary>
            Deactivates the PowerPac and updates RobotStudios internal state about which PowerPac is active.
            This method is typically called by RobotStudio, but might also be called by the PowerPac.
            </summary>
            <remarks>If the PowerPac is not already deactivated, <b>OnDeactivate</b> is called.</remarks>
            <returns>True if <b>OnDeactivate</b> returns true or already deactivated. False if <b>OnDeactivate</b> returns false.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.OnActivate">
            <summary>
            Called when the user has told RobotStudio to activate your PowerPac.
            </summary>
            <returns>True if you have activated the PowerPac, false if you could not activate.</returns>
            <remarks>Add the user interface elements needed for the PowerPac.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.OnDeactivate">
            <summary>
            Called when the user has told RobotStudio to deactivate your PowerPac.
            </summary>
            <returns>True if you have deactivated the PowerPac, false if not. For example you might want to prevent deactivation if there is unsaved data.</returns>
            <remarks>
            Remove or hide(?) the user interface elements added in OnActivate. RobotStudio will make visible all its RibbonTabs automatically.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.CanActivate(System.String@)">
            <summary>
            Called by RobotStudio user interface code, to let you tell the user if your PowerPac can be activated or not.
            </summary>
            <param name="reason">If you return false, then specify a reason using this paramter.</param>
            <returns>True if the PowerPac can be activated, false if not.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.CanDeactivate(System.String@)">
            <summary>
            Called by RobotStudio user interface code, to let you tell the user if your PowerPac can be deactivated or not.
            </summary>
            <param name="reason">If you return false, then specify a reason using this paramter.</param>
            <returns>True if the PowerPac can be activated, false if not.</returns>
            <remarks>
            The default implementation always returns true, which should be sufficient for most PowerPacs.
            This method will be called frequently. Only return false if your in the middle of along running operation that cannot easily be interrupted.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.OnLoad">
            <summary>
            Called when the PowerPac DLL is first loaded into memory by RobotStudio.
            </summary>
            <remarks>
            Override this method only if you need to do initialization code that should only be called once in the life time of the PowerPac.
            Do not add user interface here.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.IProgressCallback">
            <summary>
            Callback interface for time-consuming operations.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.IProgressCallback.SetProgress(System.Double)">
            <summary>
            Sets the current progress of the operation. The value should be between 0 and 1.
            </summary>
            <param name="progress"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.IProgressCallback.SetState(System.String)">
            <summary>
            Sets a text indicating the current state of the operation.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.IProgressCallback.SupportsCancel">
            <summary>
            Sets a value indicating if the operation can be cancelled.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.IProgressCallback.SupportsProgress">
            <summary>
            Sets a value indicating if the SetProgress() callback will be called.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.IProgressCallback.CancelRequested">
            <summary>
            Gets a value indicating if the client has requested that the operation should be cancelled.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.IHasSystemId">
            <summary>
            Interface for objects that provide a <b>SystemId</b> property.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.IHasSystemId.SystemId">
            <summary>
            Gets the system id.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.IChange">
            <summary>
            Interface for objects that represent an undoable operation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.IChange.Undo">
            <summary>
            Undo the operation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.IChange.Redo">
            <summary>
            Redo the operation.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ISupportCopy">
            <summary>
            This interface is implemented by project objects which are possible to copy.
            It is typically used when implementing Copy/Paste functionality.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ISupportCopy.Copy">
            <summary>
            Creates a copy of the project object.
            </summary>
            <returns>The copied project object.</returns>
            <remarks>
            Always refer to the documentation of the implementing object for a detailed description of the copy behaviour.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ICustomContextType">
            <summary>
            Enables context based UI based on instance data rather than object type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ICustomContextType.ContextType">
            <summary>
            Gets a string that defines the context type of the instance.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LicenseInformation">
            <summary>
            Contains information about a license
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Features">
            <summary> Feature names </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Version">
            <summary> Product version </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Type">
            <summary> License type </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.IsTrial">
            <summary> True if this is a trial license </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.ExpirationDate">
            <summary> License end date</summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.TotalLicenses">
            <summary> Total number of license instances </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.VendorInfo">
            <summary> Vendor-defined information </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.State">
            <summary> Describes the state of the license </summary>
            <remarks> If the license can be used, State equals "Valid" </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.ActivationKey">
            <summary> The key used when the license was activated.</summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LicenseInformation.IsValid">
            <summary> Returns true if the license is valid </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.IsCheckedOut">
            <summary>
            True if a floating license is checked out.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Tags">
            <summary>
            Vendor-defined tags.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X">
            <exclude/>
            <summary>Defines features and properties associated with the Software Potential Product Definition for 'RobotStudio' - '7.x'</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features">
            <summary>Defines Attributes used to mark code for Protection by the Software Potential Code Protector, together with the (string) Names of the features for the purposes of generating custom licensing queries.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Machine_Tending_Powerpac_Ii">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Machine_Tending_PowerPac_II; Description: The complete new machine tending PP 2013' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Proe_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: ProE_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Iges_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: IGES_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dummy5">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Dummy5' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Step_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: STEP_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Feature3D_Printing_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: 3D_Printing_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Remote_Laser_Welding_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Remote_Laser_Welding_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Jt_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: JT_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Arcweld_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: ArcWeld_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Parasolid_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Parasolid_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Schooledition">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: SchoolEdition' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dispensing_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Dispensing_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Cutting_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Cutting_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dxf_Dwg_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: DXF_DWG_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Catia_V5_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: CATIA_V5_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Multiuser">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: MultiUser; Description: Dummy feature for SOFA' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Inventor_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Inventor_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Trial">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Trial' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dummy1">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Dummy1' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Nx_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: NX_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Internal">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Internal' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Drs_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: DRS_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Machining_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Machining_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Painting_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Painting_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Machine_Tending_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Machine_Tending_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Solidworks_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: SolidWorks_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Wolf_Additive">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Wolf_Additive' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.VdaFs_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: VDA-FS_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dummy2">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Dummy2' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Pickmaster_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: PickMaster_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Picking_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Picking_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Palletizing_Powerpac">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Palletizing_PowerPac' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Test">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Test; Description: Feature used by unit test' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dummy4">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Dummy4' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Solidedge_Converter">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: SolidEdge_Converter' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Dummy3">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Dummy3' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Partneredition">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: PartnerEdition' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Researchedition">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: ResearchEdition' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.Premium">
            <summary>Require a License for 'RobotStudio' - '7.x' with the 'Name: Premium' Feature to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.Features.LicensedFeatureAttribute">
            <summary>
            <para>Marks a method to be replaced with Protected code by the Software Potential Code Protector during the build process.</para>
            <para>Typically one should use the specific Feature attributes in this <c>Features</c> class in preference to using this directly.</para>
            <para>Updating the NuGet package associated with this file will pick up new Features.</para>
            </summary>
            <remarks>This class fulfills two key requirements in order to be identified by the Software Potential Code Protector versions >= 3.2.1942 as a Protection Attribute just as Slps.ProtectionAttributes.FeatureAttribute is:
            - class name is LicensedFeatureAttribute (even after Obfuscation)
            - bears a read/write property called FeatureName which has a value matching that in the Software Potential Product Definition (even after Obfuscation)
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Robotstudio_7X.LicenseAttribute">
            <summary>Require any License for 'RobotStudio' - '7.x' to be present.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LicenseValidator">
            <summary>
            Manages licenses that unlock licensed features
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LicenseValidator.CurrentVersion">
            <summary>
            Gets the version string required for licenses used by the current product version.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.Initialize">
            <summary>
            This method <b>must</b> be called before any other licensing related or protected methods.
            It will throw an exception if the license store is not properly configured.
            </summary>
            <remarks>This method is called by RobotStudioAPI.Initialize(), so there is normally no
            need to call this explicitly.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LicenseValidator.Disabled">
            <summary>
            Indicates that all licensed functionality should be disabled, and the application should run in basic mode.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetLicenseInformation(System.String,ABB.Robotics.RobotStudio.LicenseInformation@)">
            <summary>
            Returns information about the license for a specific feature
            </summary>
            <param name="feature">Feature name</param>
            <param name="licenseInformation" />
            <returns>True if the feature was found</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetLicenseState(System.String)">
            <summary>
            Returns information about the license state for a specific feature
            </summary>
            <param name="feature">Feature name</param>
            <returns>"Valid" if a valid license exists, empty string or eror message otherwise. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.IsValidLicenseAvailable(System.String)">
            <summary>
            Checks if there is a valid license available for a feature,
            but does not perform a full validation.
            </summary>
            <remarks>
            This should only be used as a hint if a licensed functionality should be enabled.
            Use declarative code protection to enforce licensing when the functionality is executed.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetInstalledLicenses">
            <summary>
            Returns information about all licenses on the client and the server
            </summary>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.InstallLicense(System.Byte[],ABB.Robotics.RobotStudio.LicenseInformation@)">
            <summary>
            Installs a binary license from a manual activation.
            </summary>
            <param name="licenseKey"></param>
            <param name="licenseInformation"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.UninstallLicense(System.String)">
            <summary>
            Uninstalls the license with the specified activation key.
            </summary>
            <param name="activationKey"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.IsNotLicensedException(System.Exception)">
            <summary>
            Returns true if an <see cref="T:System.Exception"/> is caused by executing a protected method when no valid license is available.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Logger">
            <summary>
            Provides methods and events to support logging of messages to the user.
            </summary>
            <example><code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Logger Example" lang="cs" title="Logger Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Logger.CategoryCaptions">
            <summary>
            Key-value pairs for translating category ids to (localized) texts.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Logger.DefaultMessageActivatedHandler">
            <summary>
            Called when a message of the type "LogMessage" is activated
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Logger.MessageActivated">
            <summary>
            Raised when a message is activated, e.g. double-clicked in the GUI.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Logger.LogMessageRemoved">
            <summary>
            Raised when a message is removed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Logger.LogMessageAdded">
            <summary>
            Raised when a message is added.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(ABB.Robotics.RobotStudio.LogMessage,System.Boolean)">
            <summary>
            Adds a log message to the logger.
            </summary>
            <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to add.</param>
            <param name="bringToFront">Indicates whether the output window should be brought to the foreground then the message is added.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(ABB.Robotics.RobotStudio.LogMessage)">
            <summary>
            Adds a log message to the logger.
            </summary>
            <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to add. </param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(System.String)">
            <summary>
            Adds an information log message to the logger.
            </summary>
            <param name="message">The message to add.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
            <summary>
            Adds a log message to the logger.
            </summary>
            <param name="message">The message to add.</param>
            <param name="severity">The severity of the message.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(System.String,System.Boolean)">
            <summary>
            Adds an information log message to the logger.
            </summary>
            <param name="message">The message to add.</param>
            <param name="bringToFront">Indicates whether the output window should be brought to the foreground then the message is added.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.RemoveMessage(ABB.Robotics.RobotStudio.LogMessage)">
            <summary>
            Removes a log message from the logger.
            </summary>
            <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to remove. </param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.RemoveMessage(ABB.Robotics.RobotStudio.LogMessage,System.Boolean)">
            <summary>
            Removes a log message from the logger.
            </summary>
            <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to remove. </param>
            <param name="removeFromOutput">Indicates if the message should be removed from the Output view.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.Clear(System.String)">
            <summary>
            Removes all log messages with the specified category.
            </summary>
            <param name="category"></param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.Clear(System.String,System.Boolean)">
            <summary>
            Removes all log messages with the specified category.
            </summary>
            <param name="category"></param>
            <param name="removeFromOutput">Indicates if the messages should be removed from the Output view.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.Clear">
            <summary>
            Clears the logger. All messages are removed.
            </summary>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.Clear(System.Boolean)">
            <summary>
            Clears the logger. All messages are removed.
            </summary>
            <param name="removeFromOutput">Indicates if the messages should be removed from the Output view.</param>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.GetMessages(System.String)">
            <summary>
            Returns all log messages with the specified category.
            </summary>
            <param name="category"></param>
            <returns></returns>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.GetMessages">
            <summary>
            Returns an all log messages in the logger.
            </summary>
            <remarks>This method is thread safe.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.ActivateMessage(ABB.Robotics.RobotStudio.LogMessage)">
            <summary>
            Fires the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated" /> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Logger.ActivateMessage(System.Object,ABB.Robotics.RobotStudio.LogMessage)">
            <summary>
            Fires the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated" /> and <see cref="E:ABB.Robotics.RobotStudio.LogMessage.MessageActivated"/> events
            and shows more details if the <see cref="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Handled"/> is not True and the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> is of base class type.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.LogMessage">
            <summary>
            Represents a log message that can be added to the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
            <remarks>
            This class can be used as it is, or it is possible to inherit from it to attach
            additional data to a log message.
            </remarks>
            <example><code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Logger Example" lang="cs" title="Logger Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity,System.String)">
            <summary>
            This constructor is for internal use only.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text, detailed text, category, severity and help topic.
            </summary>
            <param name="text">The message text.</param>
            <param name="category">The message category.</param>
            <param name="severity">The severity of the message.</param>
            <param name="helpTopic">The helpt topic.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text, category and severity.
            </summary>
            <param name="text">The message text.</param>
            <param name="category">The message category.</param>
            <param name="detailedText">A more detaild version of the message text.</param>
            <param name="severity">The severity of the message.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text, category and severity.
            </summary>
            <param name="text">The message text.</param>
            <param name="category">The message category.</param>
            <param name="severity">The severity of the message.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text and severity.
            </summary>
            <param name="text">The message text.</param>
            <param name="severity">The severity of the message.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text and category.
            </summary>
            <param name="text">The message text.</param>
            <param name="category">The message category.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text.
            </summary>
            <param name="text">The message text.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.Action{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage"/> class with the specified message text and hyperlink(s).
            </summary>
            <param name="text">The message text including hyperlink(s) enclosed in double curly bracers. <example>Example: Click {{here}} or {{here}}.</example></param>
            <param name="requestNavigate">Called when a hyperlink is clicked in the UI. Input is the index of the hyperlink in the message.</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.Text">
            <summary>
            Gets the message text.
            </summary>
            <value>
            The message text.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.DetailedText">
            <summary>
            A more detailed description that if set to anything will be shown in a dialog when the message is activated.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.Category">
            <summary>
            Gets the message category. This property is used to categorize log messages which is related to each other.
            A PowerPack for example, could define its own category for all messages that it logs.
            </summary>
            <value>
            The message category.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.TimeStamp">
            <summary>
            Gets the date and time when the message was logged.
            </summary>
            <value>
            The date and time when the message was logged.
            </value>		
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.Severity">
            <summary>
            Gets the severity of the message. The severity is specified by the <see cref="T:ABB.Robotics.RobotStudio.LogMessageSeverity"/> enumerator.
            </summary>
            <value>
            The severity of the message.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.SequenceNumber">
            <summary>
            Gets the sequence number of the message severity of the message.
            </summary>
            <value>
            The sequence number is an integer that is increased each time a new message is created.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.HelpTopic">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.LogMessage.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.CanActivate">
            <summary>
            Indicates if this message can be double-clicked to display more information.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.LogMessage.RequestNavigate">
            <summary>
            Called when a hyperlink is clicked in the UI. Input is the index of the hyperlink in the message.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.LogMessage.MessageActivated">
            <summary>
            Raised when this message is activated, e.g. double-clicked in the GUI.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.MeasuringUnit">
            <summary>
            Represents a measuring unit such as meter, millimeter, m/s, rad/s2.
            A unit belongs to a quantity. For example meter and millimeter belongs
            to the quantity length, and m/s belongs to the quantity velocity.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.#ctor(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MeasuringUnit class.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.Identifier">
            <summary>
            Gets the numeric identifier of measuring unit.
            </summary>
            <value>
            The identifier of the measuring unit.
            </value>
            <remarks>
            The identifier is unique within the quantity and
            maps to the unit enumerations of the Quantity class.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.Name">
            <summary>
            Gets the name of the measuring unit.
            </summary>
            <value>
            The name of the measuring unit.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.DisplayName">
            <summary>
            Gets the display name of the measuring unit. This name is localized and depends on current locale.
            </summary>
            <value>
            The display name of the measuring unit.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.DisplayDecimals">
            <summary>
            Gets or sets the number of decimals to display when a numeric value
            of the measuring unit shall be displayed as text in a user interface.
            </summary>
            <value>
            The number of decimals to display when a numeric value
            of the measuring unit shall be displayed as text in a user interface.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.EditDecimals">
            <summary>
            Gets or sets the number of decimals to display when a numeric value
            of the measuring unit is edited.
            </summary>
            <value>
            The number of decimals to display when a numeric value
            of the measuring unit is edited.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.BuiltIn">
            <summary>
            Gets a value indicating whether the MeasuringUnit is built in.
            A builtin measuringunit cannot be removed from a Quantity.
            </summary>
            <value>
            The identifier of the measuring unit.
            </value>
            <remarks>
            The identifier is unique within the quantity and
            maps to the unit enumerations of the Quantity class.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertToSI(System.Double)">
            <summary>
            Converts a value expressed in the unit represented by the MeasuringUnit
            to a value expressed in the corresponding SI unit.
            </summary>
            <returns>
            The value in SI unit.
            </returns>
            <param name="value">The value to convert to SI unit.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertFromSI(System.Double)">
            <summary>
            Converts a value from SI unit to the unit represented by the MeasuringUnit.
            </summary>
            <returns>
            The value converted to the unit represented by the MeasuringUnit.
            </returns>
            <param name="value">The value to convert from SI unit.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertFromSIToDisplayString(System.Double,System.Int32)">
            <summary>
            Converts a value expressed in SI unit to a string that can be displayed in a user interface.
            the number of decimals specified by the MeasuringUnit is used.
            </summary>
            <returns>
            The display string.
            </returns>
            <param name="value">The SI value to convert to a display string.</param>
            <param name="numDecimals">The number of decimals to use</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertFromSIToDisplayString(System.Double)">
            <summary>
            Converts a value expressed in SI unit to a string that can be displayed in a user interface.
            the number of decimlas specified by the MeasuringUnit is used.
            </summary>
            <returns>
            The display string.
            </returns>
            <param name="value">The SI value to convert to a display string.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertToSIFromDisplayString(System.String)">
            <summary>
            Converts a value expressed in SI unit to a string that can be displayed in a user interface.
            The number of decimlas to use can be specified.
            </summary>
            <returns>
            The display string.
            </returns>
            <param name="displayString">The SI value to convert to a display string.</param>
            <exception cref="T:System.ArgumentException">
            The argument is not valid.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.IsValidDisplayCharacter(System.Char)">
            <summary>
            Returns a value indicating whether the specified character is valid
            in the string representation the MeasuringUnit.
            </summary>
            <returns>
            A value indicating whether the specified character is valid.
            </returns>
            <param name="displayCharacter">The character to test for validity.</param>
            <exception cref="T:System.ArgumentException">
            The argument is not valid.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.IsValidDisplayString(System.String)">
            <summary>
            Returns a value indicating whether the specified string is a valid string representation of the MeasuringUnit.
            </summary>
            <returns>
            A value indicating whether specified string is a valid string representation of the MeasuringUnit.
            </returns>
            <param name="displayString">The character to test for validity.</param>
            <exception cref="T:System.ArgumentException">
            The argument is not valid.</exception>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.MeasuringUnitCollection">
            <summary>
            Represents a collection of measuring units.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.#ctor">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Count">
            <summary>
            Gets the number of items in the MeasuringUnitCollection object.
            </summary>
            <value>The number of items in the MeasuringUnitCollection object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Item(System.String)">
            <summary>
            Gets the item with the specified name.
            </summary>
            <param name="name">The name the item to get.</param>
            <exception cref="T:System.ArgumentException">
            A unit with the specified name does not exists in the collection.
            </exception>
            <value>The item at the specified identifier.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified identifier.
            </summary>
            <param name="index">The unique identifier of the item to get.</param>
            <exception cref="T:System.ArgumentException">
            The identifier value is not valid.
            </exception>
            <value>The item at the specified identifier.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.MeasuringUnitCollection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.MeasuringUnitCollection"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Add(ABB.Robotics.RobotStudio.MeasuringUnit)">
            <summary>
            Adds a MeasuringUnit object to the MeasuringUnitCollection object.
            </summary>
            <param name="unit">The unit to be added.</param>
            <exception cref="T:System.InvalidOperationException">
            The unit has already been added to the collection.</exception>
            <exception cref="T:System.ArgumentException">
            The argument is not valid.
            </exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Remove(ABB.Robotics.RobotStudio.MeasuringUnit)">
            <summary>
            Remove a MeasuringUnit object from the MeasuringUnitCollection object.
            </summary>
            <param name="unit">The unit to be removed.</param>
            <exception cref="T:System.ArgumentNullException">
            The argument is not valid or the unit is builtin.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The unit is built in or has not been added to the collection.</exception>
            <remarks>
            Units that are builtin cannot be removed. See property IsBuiltin.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.ToArray">
            <summary>
            Copies the MeasuringUnitCollection elements to a new array.
            </summary>
            <returns>
            A new array containing elements copied from the MeasuringUnitCollection
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate over the MeasuringUnitCollection object.
            </summary>
            <returns>
            An IEnumerator object that represents the MeasuringUnitCollection object.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.CopyTo(ABB.Robotics.RobotStudio.MeasuringUnit[],System.Int32)">
            <summary>
            Copies all items in the collection to an array.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all items in the collection to an array.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Options">
            <summary>
            Provides static methods, properties and events to store and read user options. Options are grouped in sections.
            </summary>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.#ctor">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.EnablePersistence(System.Boolean)">
            <summary>
            Used by unit tests
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetFileName(System.String)">
            <summary>
            Sets an alternative filename for the options file.
            </summary>
            <remarks>
            Set this when using the Options API outside the RobotStudio executable.
            This must be set before using any other method. If the file does not exist,
            the default file is loaded.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.Reload">
            <summary>
            Reloads options from disk
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.Save">
            <summary>
            Commits all options to disk.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Options.Language">
            <summary>
            Gets or sets the application language as an IETF language tag (e.g. "en-US").
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Options.SectionChanged">
            <summary> Occurs when the specified section has called. </summary>
            <remarks> Also raised for "section.key0" where key0 is the first point-separated part of the property key
            E.g. SetValue("RobotStudio", "Appearance.Color") raises SectionChanged("RobotStudio.Appearance")</remarks>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Options.Changed">
            <summary>
            Fired when a change of options has occured.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.String[])">
            <summary>
            Sets an string array value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The array of strings to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets a boolean value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The boolean to use as value for the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.String)">
            <summary>
            Sets a string value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The string to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Single)">
            <summary>
            Sets a float value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The float to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Double)">
            <summary>
            Sets a double value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The double to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Int64)">
            <summary>
            Sets an 64-bit integer value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The integer to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Int32)">
            <summary>
            Sets an integer value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The integer to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Drawing.Color)">
            <summary>
            Sets a <see cref="T:System.Drawing.Color"/> value for an option with the specified key.
            </summary>
            <param name="section">The options section in which to set a value.</param>
            <param name="key">The key of the option.</param>
            <param name="value">The integer to use as value for the option.</param>
            <remarks>Options created by Add-Ins shall use a section name that is unique for the Add-In, to avoid conflicts between Add-Ins. If the Add-In has a lot of options and you would like to group them into different sections, then use the same prefix for each section name. For example "CompanyABCAddIn.SectionA", "CompanyABCAddIn.SectionB" etc.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.String[])">
            <summary>
            Sets a default string array value for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets a default boolean value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.String)">
            <summary>
            Sets a default string value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Single)">
            <summary>
            Sets a default float value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Double)">
            <summary>
            Sets a default double value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Int64)">
            <summary>
            Sets a default 64-bit integer value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Int32)">
            <summary>
            Sets a default integer value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Drawing.Color)">
            <summary>
            Sets a default <see cref="T:System.Drawing.Color"/> value of for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which the default value shall be set.</param>
            <param name="key">The key of the option for which the default value shall be set.</param>
            <param name="value">The default value of the option.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.RemoveKey(System.String,System.String)">
            <summary>
            Removes an option with the specified key from the specified section.
            </summary>
            <param name="section">The options section which contains the option that shall be removed.</param>
            <param name="key">The key of the option to remove.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.RemoveSection(System.String)">
            <summary>
            Removes an entire section. Use with care!
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.GetValue(System.String,System.String)">
            <summary>
            Gets the value for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which to get the value.</param>
            <param name="key">The key of the option from which to get the value.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.TryGetValue``1(System.String,System.String,``0@)">
            <summary>
            Gets the typed value for an option with the specified key.
            </summary>
            <typeparam name="T">The expected type of the value.</typeparam>
            <param name="section">The options section which contains the option for which to get the value.</param>
            <param name="key">The key of the option from which to get the value.</param>
            <param name="value">The value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns>True if the option was found and of the specified type, false otherwise.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.GetDefaultValue(System.String,System.String)">
            <summary>
            Gets the default value for an option with the specified key.
            </summary>
            <param name="section">The options section which contains the option for which to get the default value.</param>
            <param name="key">The key of the option for which to get the default value.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.TryGetDefaultValue``1(System.String,System.String,``0@)">
            <summary>
            Gets the typed default value for an option with the specified key.
            </summary>
            <typeparam name="T">The expected type of the value.</typeparam>
            <param name="section">The options section which contains the option for which to get the default value.</param>
            <param name="key">The key of the option from which to get the default value.</param>
            <param name="value">The default value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns>True if the default value was found and of the specified type, false otherwise.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.Load(System.String)">
            <summary>
            Load options from an XML file.
            </summary>
            <param name="fileName">The name of the XML file to load.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.SaveAs(System.String)">
            <summary>
            Save options to an XML file.
            </summary>
            <param name="fileName">The name of the XML file where options will be saved.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.GetSections">
            <summary>
            Gets an array of all options sections.
            </summary>
            <returns>
            An array of strings with the names of the options sections.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Options.GetKeys(System.String)">
            <summary>
            Gets an array of all option keys in the specified section.
            </summary>
            <returns>
            An array of strings with the names of the option sections.
            </returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Options.RestartRequired">
            <summary>
            Gets or sets a value indicating if the application needs to be restart for changed options to apply.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Project">
            <summary>
            Base class for all project types. Available project types will differ depending
            on the product that this API is used within.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.FileInfo">
            <summary>
            Gets information about the file where the project is stored.
            </summary> 
            <value>
            A <see cref="T:System.IO.FileInfo"/> object with information about the file where the project is persisted. If the project has not been saved yet, null is returned.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.Format">
            <summary>
            Gets the format of the project storage.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.ActiveProject">
            <summary>
            Gets the project that is currently active.
            </summary> 
            <value>
            The <b>Project</b> that is currently active. Only one project can be active at a given time.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.IsDirty">
            <summary>
            Determines if the project has unsaved changes.
            </summary> 
            <value>
            True means that some state in the project has been changed since it was loaded or saved last time. False means that no change to the state has been done. When the project is saved, this value is reset to false.
            Only change of persistent state will affect this property.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.Selection">
            <summary>
            This property is obsolete. Use <see cref="P:ABB.Robotics.RobotStudio.Selection.SelectedObjects"/> instead.
            </summary> 
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.UndoContext">
            <summary>
            Gets an object giving access to the undo system for the project. which gives information about selected objects and makes it possible to select objects.
            </summary> 
            <value>
            A <see cref="P:ABB.Robotics.RobotStudio.Project.UndoContext"/> objcet giving access to the undo system for the project. It gives access to the state based undo support that is built in to all objects deriving from <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.DocumentInfo">
            <summary>
            Gets an object which contains properties about the project file
            </summary> 
            <value>
            A <see cref="P:ABB.Robotics.RobotStudio.Project.DocumentInfo"/> objcet which contains properties about the project file
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.ReadOnly">
            <summary>
            Gets or sets a value indicating if the corresponding project file is readonly or in use.
            If the value is true it is not possible to call Save().
            </summary>
            <remarks> The value can only be set to true. Trying to set the value to false will
            cause an exception. </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.ModelReadOnly">
            <summary>
            Gets or sets a value indicating that the project cannot be modified.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ProjectObjectRemoved">
            <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.ContainingProject" /> property has changed to null.
            This will occur when an <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> object is removed from a <see cref="T:ABB.Robotics.RobotStudio.Project" /> project.
            For example when an object removed from its owning collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.BeforeLoadProjectFile">
            <summary>
            Occurs before a <see cref="T:ABB.Robotics.RobotStudio.Project"/> is loaded from file.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ReferencedProjectFileNotSame">
            <summary>
            Occurs when a file referenced by a <see cref="T:ABB.Robotics.RobotStudio.Project"/> being loaded is not the same as when the project was saved.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ReferencedProjectFileNotFound">
            <summary>
            Occurs when a file referenced by a <see cref="T:ABB.Robotics.RobotStudio.Project"/> being loaded is not found in the expected location.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.AutoSaveAvailable">
            <summary>
            Occurs if autosave data is available for a <see cref="T:ABB.Robotics.RobotStudio.Project"/> being loaded.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ProjectFileLocked">
            <summary>
            Occurs if a <see cref="T:ABB.Robotics.RobotStudio.Project"/> file being loaded in read-write mode cannot be opened for writing.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.Saved">
            <summary>
            Occurs after a <see cref="T:ABB.Robotics.RobotStudio.Project"/> has been saved to file.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.Saving">
            <summary>
            Occurs before a <see cref="T:ABB.Robotics.RobotStudio.Project"/> is saved to file.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.Closed">
            <summary>
            Occurs after a <see cref="T:ABB.Robotics.RobotStudio.Project"/> is closed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ProjectFileDifferentVersion">
            <summary>
            Occurs when a file that was created by a different application version is being loaded.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ActiveProjectChanged">
            <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Project.ActiveProject"/> property has changed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.Save">
            <summary>
            Saves the project to its corresponding project file.
            </summary>
            <exception cref="T:System.Exception">
            The project has not been saved before, so there is no corresponding project file.
            You must call <see cref="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String)" /> before you can call save.
            </exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String)">
            <summary>
            Saves the project to a project file on a new location.
            </summary>
            <param name="fileName">Path to the project file</param>
            <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
            <remarks>
            If the project has been saved before, the old project file will remain on the file system. When <see cref="M:ABB.Robotics.RobotStudio.Project.Save" /> is called next time, the project will be saved to the new location.
            To make a copy of the project, but then continue to use the original file, use <see cref="M:ABB.Robotics.RobotStudio.Project.SaveCopyAs(System.String)" />.
            <seealso cref="M:ABB.Robotics.RobotStudio.Project.SaveCopyAs(System.String)" /></remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String,ABB.Robotics.RobotStudio.ProjectFormat)">
            <summary>
            Saves the project to a project file on a new location.
            </summary>
            <param name="fileName">Path to the project file</param>
            <param name="format">Format of the project</param>
            <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
            <remarks>
            If the project has been saved before, the old project file will remain on the file system. When <see cref="M:ABB.Robotics.RobotStudio.Project.Save" /> is called next time, the project will be saved to the new location.
            To make a copy of the project, but then continue to use the original file, use <see cref="M:ABB.Robotics.RobotStudio.Project.SaveCopyAs(System.String)" />.
            <seealso cref="M:ABB.Robotics.RobotStudio.Project.SaveCopyAs(System.String)" /></remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.SaveCopyAs(System.String)">
            <summary>
            Saves a copy of the project file.
            </summary>
            <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
            <remarks>
            Saving a copy will not affect the location where the project is saved next time <see cref="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String)" /> is called.
            <seealso cref="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String)" /><seealso cref="M:ABB.Robotics.RobotStudio.Project.Save" /></remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.Close">
            <summary>
            Closes the project without saving changes.
            </summary>
            <remarks>
            Note that unsaved changes are lost when closing the project. The locks on the project file are released.
            <seealso cref="M:ABB.Robotics.RobotStudio.Project.Save" /></remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.AutoSave">
            <summary>
            Saves any pending changes to the auto-save stream in the <see cref="T:ABB.Robotics.RobotStudio.Project"/> file.
            </summary>
            <returns>
            True if the changes were saved.
            False if there were no changes, or if the project was opened as read-only.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.FromFileName(System.String)">
            <summary>
            Returns the Project with the given file name if it already is loaded,
            otherwise null.
            </summary>
            <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Project" /> if already loaded, otherwise null.&gt;
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Project.GetObjectFromUniqueId(System.String)">
            <summary>
            Finds an object in the <see cref="T:ABB.Robotics.RobotStudio.Project"/> by its <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.UniqueId"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.OpenProjects">
            <summary>
            Gets a collection of all currently open <see cref="T:ABB.Robotics.RobotStudio.Project"/>s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Project.SavedStates">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.SavedStateCollection"/> that contains saved states for this object.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ProjectAdded">
            <summary>
            Occurs when a <see cref="T:ABB.Robotics.RobotStudio.Project"/> is loaded or created.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Project.ProjectRemoved">
            <summary>
            Occurs when a <see cref="T:ABB.Robotics.RobotStudio.Project"/> is closed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectDocumentType">
            <summary>
            Specifies the type of a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentType.FileReference">
            <summary>
            The document represents a file on disk.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentType.FolderReference">
            <summary>
            The document represents a folder on disk.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentType.EmbeddedFile">
            <summary>
            The document is embedded in the station file.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectDocumentFlags">
            <summary>
            Specifies values for the <see cref="P:ABB.Robotics.RobotStudio.ProjectDocument.Flags"/> property.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.None">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.Locked">
            <summary>
            Indicates that the document cannot be modified, saved or deleted in the GUI.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.IncludeInPackAndGo">
            <summary>
            Indicates that the file or folder should be included in Pack and Go.
            The path must be relative to the parent folder of the project file.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.PackRecursive">
            <summary>
            Indicates that subfolders are included in Pack and Go.
            Valid only for folder references.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectDocument">
            <summary>
            Represents a document associated with a project.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(System.String,ABB.Robotics.RobotStudio.ProjectDocumentType)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/>
            </summary>
            <param name="url">Document URL</param>
            <param name="type">Document type</param>
            <remarks>To create an embedded file, use ProjectDocument(string name, byte[] data).</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(System.String,ABB.Robotics.RobotStudio.ProjectDocumentType,ABB.Robotics.RobotStudio.ProjectDocumentFlags)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/>
            </summary>
            <param name="url">Document URL</param>
            <param name="type">Document type</param>
            <param name="flags">Document flags</param>
            <remarks>To create an embedded file, use ProjectDocument(string name, byte[] data).</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new embedded <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> from binary data.
            </summary>
            <param name="data">Document name</param>
            <param name="name">Document data</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Type">
            <summary>
            Gets the type of document.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Url">
            <summary>
            Gets or sets the URL of the document.
            For a file or folder reference, this is a file system path.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Flags">
            <summary>
            Gets or sets the document flags.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Available">
            <summary>
            Returns true if the document can be accessed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.GetData">
            <summary>
            Gets the binary data of an embedded document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.SetData(System.Byte[])">
            <summary>
            Sets the binary data of an embedded document.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Size">
            <summary>
            Gets the size (in bytes) of this document.
            </summary>
            <remarks>Returns -1 for a folder reference, or if the document isn't accessible.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.LastChange">
            <summary>
            Gets the last time the document was modified.
            </summary>
            <remarks>Returns null if the document isn't accessible.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Comment">
            <summary>
            Gets or sets a comment for the document.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectDocumentCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/>s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Parent">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> that contains this collection, typically a <see cref="T:ABB.Robotics.RobotStudio.Project"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> at the spcified index.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> with the specified name.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Add(ABB.Robotics.RobotStudio.ProjectDocument)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Insert(System.Int32,ABB.Robotics.RobotStudio.ProjectDocument)">
            <summary>
            Inserts a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> at the specified index.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Clear">
            <summary>
            Removes all <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/>s from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Contains(ABB.Robotics.RobotStudio.ProjectDocument)">
            <summary>
            Determines whether collection contains a specific <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.CopyTo(ABB.Robotics.RobotStudio.ProjectDocument[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Remove(ABB.Robotics.RobotStudio.ProjectDocument)">
            <summary>
            Removes a specific <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.IndexOf(ABB.Robotics.RobotStudio.ProjectDocument)">
            <summary>
            Determines the index of a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument"/> in the list.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObject">
            <summary>
            Abstract base class for all objects that can be part of a Project. It can not be instantiated.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Name">
            <summary>
            Gets or sets the name of the object
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.DisplayName">
            <summary>
            Gets the name of the the object that should be displayed in the GUI.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Parent">
            <summary>
            Returns the objects parent, if it has one.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.ContainingProject">
            <summary>
            Returns the Project that this object is a part of, or null if it is
            not part of a Project.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Attributes">
            <summary>
            Returns a collection of dynamic attributes attached to the object
            </summary>
            <remarks>
            The attribute collection can be used to attach application-specific data to
            the project model. Data stored in attributes will handle UNDO and persistence
            correctly.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.UIVisible">
            <summary>
            Gets or sets a value that indicates if this object should be displayed in GUI
            such as an object browser.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.TypeDisplayName">
            <summary>
            Gets a localized name for the type of this object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.UniqueId">
            <summary>
            Gets a persisted, globally unique identifier for this object, that can be used
            to find the object using the <see cref="M:ABB.Robotics.RobotStudio.Project.GetObjectFromUniqueId(System.String)"/> method.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.ExistingUniqueId">
            <summary>
            Does not create if it doesn't exist.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.NativeObject">
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.PimId">
            <summary>
            Only for use by persistence system
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Children">
            <summary>
            Enumerates all child objects. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObject.FindObjects(System.Predicate{ABB.Robotics.RobotStudio.ProjectObject},System.Predicate{ABB.Robotics.RobotStudio.ProjectObject})">
            <summary>
            Recursively finds object that satisfy a condition.
            </summary>
            <param name="filter">Return true if the object should be returned.</param>
            <param name="recurse">Return true if the recursion should continue.</param>
            <returns></returns>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.ProjectObject.ProjectObjectChanged">
            <summary>
            Occurs when the ProjectObject is changed
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObject.OnRemove(ABB.Robotics.RobotStudio.Project)">
            <summary>
            Called when removed from a project.
            </summary>
            <param name="project">The old parent project.</param>
            <exclude/>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.ProjectObject.InternalEvent">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectObjectCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>s
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectCollection"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectCollection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectCollection"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.Add(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Appends a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> to the collection.
            </summary>
            <param name="projectObject">The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> object to append to this collection.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.Remove(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> from the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.Contains(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all of the <b>ProjectObjects</b> in this collection to the specified array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array of <cee cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> that recieves the elements of the collection.</param>
            <param name="index">The zero-based index in the target array where this method starts copying this collection.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.System#Collections#Generic#IEnumerable{ABB#Robotics#RobotStudio#ProjectObject}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ProjectSelection">
            <summary>
            Represents a collection of all selected objects.
            Selection is a concept used from the user interface. Typically it is used to specify for which objects to perform 
            an action, to view information for specific objects and to show which operations that are availble for specific objects.
            The most common way for a user to select an object is to click with the mouse in the graphic view or in a browser.
            Using this object you can programatically control which objects that are selected and get notified when selection has changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.Count">
            <summary>
            Gets the number of elements in the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.SingleSelectedObject">
            <summary>
            If a single object is selected, that object is returned, otherwise null.
            </summary>
            <remarks>
            This property is useful for code that does not support multi-selection.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/>.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectRemoved">
            <summary>
            Occurs when an object has been removed from the collection of selected objects.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectAdded">
            <summary>
            Occurs when an object has been added to the collection of selected objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Add(System.Object,ABB.Robotics.RobotStudio.SelectionReason)">
            <summary>
            Adds an object to the selection, also specifying why the object was selected.
            </summary>
            <remarks>
            The reason will be provided as a hint to subscribers.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Add(System.Object)">
            <summary>
            Adds an object to the selection.
            </summary>
            <remarks>
            The added object will typically be ProjectObject-derived, but this is not a requirement.
            </remarks>
            <param name="obj">The <see cref="T:System.Object" /> to add to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> object.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds a range of objects to the selection.
            </summary>
            <remarks>
            The added objects will typically be ProjectObject-derived, but this is not a requirement.
            </remarks>
            <param name="selections">The <see cref="T:System.Collections.IEnumerator" /> to add to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> objects.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Remove(System.Object)">
            <summary>
            Removes an object from the selection.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to remove from the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> object.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Clear">
            <summary>
            Removes all objects from the selection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Set(System.Object[])">
            <summary>
            Sets the selection to zero or more objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Contains(System.Object)">
            <summary>
            Determines whether the object is currently selected.
            </summary>
            <param name="obj">The object to locate in the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> object.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.ToArray">
            <summary>
            Returns an array containing all selected objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.GetTypes">
            <summary>
            Returns an array containing the types of all selected objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/> to an array, starting at a particular array index.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all of the objects in this collection to the specified array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array of <cee cref="T:System.Object" /> that recieves the elements of the collection.</param>
            <param name="index">The zero-based index in the target array where this method starts copying this collection.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity">
            <summary>
            Represents a SI quantity such as length, time, area etc.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.NoneUnit">
            <summary>
            Specifies a unit of the quantity None
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.NoneUnit.None">
            <summary>
            No unit
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.TimeUnit">
            <summary>
            Specifies a unit of the quantity Time
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.TimeUnit.Second">
            <summary>
            Seconds
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.LengthUnit">
            <summary>
            Specifies a unit of the quantity Length
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Meter">
            <summary>
            Meters
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Millimeter">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Inch">
            <summary>
            Inches
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Feet">
            <summary>
            Feet
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.AngleUnit">
            <summary>
            Specifies a unit of the quantity Angle
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngleUnit.Degree">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngleUnit.Radian">
            <summary>
            Radians
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.VelocityUnit">
            <summary>
            Specifies a unit of the quantity Velocity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.MeterPerSecond">
            <summary>
            Meters per second
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.MillimeterPerSecond">
            <summary>
            Millimeters per second
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.InchPerSecond">
            <summary>
            Inches per second
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.FeetPerSecond">
            <summary>
            Feet per second
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit">
            <summary>
            Specifies a unit of the quantity Acceleration
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.MeterPerSecond2">
            <summary>
            Meters per second squared
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.MillimeterPerSecond2">
            <summary>
            Millimeters per second squared
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.InchPerSecond2">
            <summary>
            Inches per second squared
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.FeetPerSecond2">
            <summary>
            Feet per second squared
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.Gravities">
            <summary>
            ABB Internal use only
            </summary>
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.AngularVelocityUnit">
            <summary>
            Specifies a unit of the quantity AngularVelocity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularVelocityUnit.DegreePerSecond">
            <summary>
            Degrees per second
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularVelocityUnit.RadianPerSecond">
            <summary>
            Radians per second
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.AngularAccelerationUnit">
            <summary>
            Specifies a unit of the quantity AngularAcceleration
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularAccelerationUnit.DegreePerSecond2">
            <summary>
            Degrees per second squared
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularAccelerationUnit.RadianPerSecond2">
            <summary>
            Radians per second squared
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.AreaUnit">
            <summary>
            Specifies a unit of the quantity Area
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Meter2">
            <summary>
            Square meters
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Millimeter2">
            <summary>
            Square millimeters
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Inch2">
            <summary>
            Square inches
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Feet2">
            <summary>
            Square feet
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.VolumeUnit">
            <summary>
            Specifies a unit of the quantity Volume
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Meter3">
            <summary>
            Cubic meters
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Millimeter3">
            <summary>
            Cubic millimeters
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Inch3">
            <summary>
            Cubic inches
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Feet3">
            <summary>
            Cubic feet
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.InertiaUnit">
            <summary>
            Specifies a unit of the quantity Inertia
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.InertiaUnit.Kgmeter2">
            <summary>
            Kilograms per meter squared
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.PowerUnit">
            <summary>
            Specifies a unit of the quantity Power
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.PowerUnit.Watt">
            <summary>
            Watts
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.EnergyUnit">
            <summary>
            Specifies a unit of the quantity Energy
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.EnergyUnit.Joule">
            <summary>
            Joules
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.MassUnit">
            <summary>
            Specifies a unit of the quantity Mass
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.MassUnit.Kg">
            <summary>
            Kilograms
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.QuaternionUnit">
            <summary>
            Specifies a unit for quaternions, to be able to specify decimals for the quaternions
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.QuaternionUnit.Rotation">
            <summary>
            Quaternion
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.ForceUnit">
            <summary>
            Specifies a unit for the quantity Force
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.ForceUnit.Newton">
            <summary>
            Newton
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.ElasticityUnit">
            <summary>
            Specifies a unit for the quantity Elasticity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.ElasticityUnit.NewtonPerMeter">
            <summary>
            Newton/meter
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.AngularElasticityUnit">
            <summary>
            Specifies a unit for the quantity Angular Elasticity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularElasticityUnit.NewtonPerDegree">
            <summary>
            Newton/radian
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.PressureUnit">
            <summary>
            Specifies a unit for the quantity Pressure (also used for Young's modulus)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.PressureUnit.Pascal">
            <summary>
            Pascal
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Quantity.TorqueUnit">
            <summary>
            Specifies a unit for the quantity Torque
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Quantity.TorqueUnit.NewtonMeter">
            <summary>
            Newton-meter
            </summary>
            <remarks>
            This is the default (SI) unit
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.None">
            <summary>
            Gets the builtin Quantity None.
            </summary>
            <value>
            The None Quantity object.
            </value>
            <remarks>The Quantity None is used to indicate no Quantity, instead of a null value.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Time">
            <summary>
            Gets the builtin Quantity Time.
            </summary>
            <value>
            The Time Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Length">
            <summary>
            Gets the builtin Quantity Length.
            </summary>
            <value>
            The Length Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Angle">
            <summary>
            Gets the builtin Quantity Angle.
            </summary>
            <value>
            The Angle Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Velocity">
            <summary>
            Gets the builtin quantity representing velocity.
            </summary>
            <value>
            The velocity Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Acceleration">
            <summary>
            Gets the builtin quantity representing acceleration.
            </summary>
            <value>
            The accleration Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.AngularVelocity">
            <summary>
            Gets the builtin quantity representing angular velocity.
            </summary>
            <value>
            The angular velocity Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.AngularAcceleration">
            <summary>
            Gets the builtin quantity representing angular acceleration.
            </summary>
            <value>
            The angular acceleration Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Area">
            <summary>
            Gets the builtin quantity representing area.
            </summary>
            <value>
            The area Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Volume">
            <summary>
            Gets the builtin quantity representing volume.
            </summary>
            <value>
            The volume Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Inertia">
            <summary>
            Gets the builtin quantity representing inertia.
            </summary>
            <value>
            The inertia Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Power">
            <summary>
            Gets the builtin quantity representing power.
            </summary>
            <value>
            The power Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Energy">
            <summary>
            Gets the builtin quantity representing energy.
            </summary>
            <value>
            The energy Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Mass">
            <summary>
            Gets the builtin quantity representing mass.
            </summary>
            <value>
            The mass Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Quaternion">
            <summary>
            Gets the builtin quantity representing quaternion.
            </summary>
            <value>
            The quaternion Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Force">
            <summary>
            Gets the builtin quantity representing force.
            </summary>
            <value>
            The force Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Elasticity">
            <summary>
            Gets the builtin quantity representing elasticity.
            </summary>
            <value>
            The elasticity Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.AngularElasticity">
            <summary>
            Gets the builtin quantity representing elasticity.
            </summary>
            <value>
            The elasticity Quantity object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Pressure">
            <summary>
            Gets the builtin quantity representing pressure.
            </summary>
            <value>
            The quaternion Pressure object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Torque">
            <summary>
            Gets the builtin quantity representing torque.
            </summary>
            <value>
            The quaternion Pressure object.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Quantity.GetBuiltinQuantity(ABB.Robotics.RobotStudio.BuiltinQuantity)">
            <summary>
            Returns the Quantity corresponding to an element of the BuiltinQuantity enumeration.
            </summary>
            <remarks>
            This method is for internal use only.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.Name">
            <summary>
            Gets the identifier string of the Quantity.
            </summary>
            <value>
            The identifier string.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.DisplayName">
            <summary>
            Gets the identifier string of the Quantity.
            </summary>
            <value>
            The identifier string.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.MeasuringUnits">
            <summary>
            Gets a MeasuringUnitCollection object that represents all the measuring units that
            belongs to this Quantity.
            </summary>
            <value>
            The MeasuringUnitCollection object that represents all the measuring units that
            belongs to this Quantity.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Quantity.ActiveMeasuringUnit">
            <summary>
            Gets or sets the MeasuringUnit that is currently active on this Quantity.
            </summary>
            <value>
            A cref="ApplicationAPI.MeasuringUnit" representing the active measuring unit on this Quantity.
            </value>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Quantity.ActiveMeasuringUnitChanged">
            <summary>
            Occurs when the active measuring unit of this quantity has changed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.RobotStudioAPI">
            <summary>
            Intended for internal use only.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.#ctor">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.Initialized">
            <summary>
            Gets a value that indicates if the API has been properly initialized.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.MainThread">
            <summary>
            Gets the main (GUI) <see cref="T:System.Threading.Thread"/> of the application.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.IsCondemned">
            <summary>
            Can be set before starting shutdown. Acts as a hint that proper cleanup of memory is not needed (if time consuming),
            since the process is about to die anyway.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.DataDirectory">
            <summary>
            Gets path to the directory where RobotStudios data files are stored, typically equal to the installation directory.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.EnableProjectObjectChangedEvents">
            <summary>
            Used to temporarily disable the <see cref="E:ABB.Robotics.RobotStudio.ProjectObject.ProjectObjectChanged"/> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.SynchronizeInvoke">
            <summary>
            Provides a way to execute delegates in the GUI context.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.SyncContext">
            <summary>
            Represents the synchronization context that most API methods must be called on.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.RunOnMainThread(System.Action)">
            <summary>
            Runs an action on the main (GUI) application thread.
            </summary>
            <param name="a">Action to execute</param>
            <remarks>If calling from the main thread the action is executed synchronously without error handling.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.RunOnMainThread(System.Action,System.Boolean)">
            <summary>
            Runs an action on the main (GUI) application thread.
            </summary>
            <param name="a">Action to execute</param>
            <param name="throwOnFailureToExecute">True to throw an <see cref="T:System.InvalidOperationException"/> if the main thread
            could not be used, typically if the application is in startup or shutdown phase.</param>
            <remarks>If calling from the main thread the action is executed synchronously without error handling.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Initialize(System.String)">
            <summary>
            Performs initialization necessary before any other API can be used.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Initialize">
            <summary>
            Performs initialization necessary before any other API can be used.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.Version">
            <summary>
            Gets the application version number.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Shutdown">
            <summary>
            Performs cleanup before exiting the application. After calling this no other API can be used.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.RobotStudioAPI.ShuttingDown">
            <summary>
            Occurs when <see cref="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Shutdown"/> is called.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">
            <summary>
            This exception is thrown by certain API methods when the license check fails.
            </summary>
            <remarks> This exception is <b>not</b> thrown by the LicenseValidator </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.RobotStudioLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException"/> class.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SavedState">
            <summary>
            Represents a set of object states (such as property or signal values) for one or more <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>s.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.SavedState.CanRestore">
            <summary>
            Checks if the state can be restored at this time.
            </summary>
            <remarks>For example, a state cannot be restored if it involves a controller that is executing RAPID.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.SavedState.RestoreAsync">
            <summary>
            Restores all states in this <see cref="T:ABB.Robotics.RobotStudio.SavedState"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SavedState.Name">
            <summary>
            Gets the name of this state.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SavedState.Description">
            <summary>
            Gets a description of this state.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SavedState.Time">
            <summary>
            Gets the time when this state was created or updated.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.SavedStateCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.SavedStateCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.SavedStateCollection.Add(System.String,System.Xml.Linq.XDocument)">
            <summary>
            ABB internal use
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.SavedStateCollection.Remove(ABB.Robotics.RobotStudio.SavedState)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> from the collection.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.SavedStateCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> specified by name from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.SavedStateCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ScreenRecorder">
            <summary>
            Represents a recording device that can record frames from the screen.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.Enabled">
            <summary>
            Gets a value that indicates if all preconditions for using the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder"/> are met.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.State">
            <summary>
            Gets the current state of the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.FileFormat">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat"/> to be used by the next recording.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.Compression">
            <summary>
            Get or sets the compression (codec) to be used by the next recording.
            </summary>
            <remarks>
            Use <see cref="M:ABB.Robotics.RobotStudio.ScreenRecorder.GetCompressors(ABB.Robotics.RobotStudio.ScreenRecorderFileFormat)"/> to get valid values.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.StartTime">
            <summary>
            Gets or sets a time (in seconds) before which frames should be discarded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.StopTime">
            <summary>
            Gets or sets a time (in seconds) after which recording should stopped automatically.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.TotalFrames">
            <summary>
            Gets the number of frames in the current recording.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.DroppedFrames">
            <summary>
            Gets the number of dropped frames in the current recording.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.CurrentTime">
            <summary>
            Gets the current time (in seconds) during recording.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.FrameRate">
            <summary>
            Gets or sets the desired framerate (frames per second) of the next recording.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.MaxWidth">
            <summary>
            Gets or sets the maximum width (in pixels) of the video frame.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.MaxHeight">
            <summary>
            Gets or sets the maximum height (in pixels) of the video frame.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.IncludeMouseCursor">
            <summary>
            Gets or sets a value that indicates if the mouse cursor should be included in the recording.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Start(System.String,System.IntPtr,System.Boolean)">
            <summary>
            Starts recording the content of window specified by its handle, to the specified file.
            </summary>
            <param name="filename">The name of the file where the recorded content is stored. </param>
            <param name="hWnd">Handle to the windows for which to record content. Use the <see cref="P:System.Windows.Forms.Control.Handle" /> property to get the window handle for a control.</param>
            <param name="automatic">True if the system should add frames automatically at the given frame rate, false if not.</param>
            <exception cref="T:System.Exception">The screen recorder is not enabled.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Start(System.String,System.IntPtr)">
            <summary>
            Starts recording the content of window specified by its handle, to the specified file.
            </summary>
            <param name="filename">The name of the file where the recorded content is stored. </param>
            <param name="hWnd">Handle to the windows for which to record content. Use the <see cref="P:System.Windows.Forms.Control.Handle" /> property to get the window handle for a control.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Pause">
            <summary>
            Pause the recording.
            </summary>
            <exception cref="T:System.Exception">The screen recorder is not in <see cref="T:ABB.Robotics.RobotStudio.RecorderState" /> Recording.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Resume">
            <summary>
            Resumes a paused recording.
            </summary>
            <exception cref="T:System.Exception">The screen recorder is not in <see cref="T:ABB.Robotics.RobotStudio.RecorderState" /> Paused.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Stop">
            <summary>
            Stops a recording in progress.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.StopAsync">
            <summary>
            Stops a recording in progress.
            </summary>
            <exception cref="T:System.Exception">The screen recorder is not in <see cref="T:ABB.Robotics.RobotStudio.RecorderState" /> Stopped.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.AddFrame">
            <summary>
            Adds a screenshot of the window specified in Start() to the current recording.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.AddFrame(System.Boolean)">
            <summary>
            Adds a screenshot of the window specified in Start() to the current recording.
            </summary>
            <param name="synchronous">Block until the last frame is complete.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.AddFrame(System.Drawing.Bitmap)">
            <summary>
            Adds a frame to the output video.
            The bitmap will be automatically disposed once it has been encoded.
            </summary>
            <remarks>This method always records a frame regardless of the <see cref="P:ABB.Robotics.RobotStudio.ScreenRecorder.StartTime"/> and <see cref="P:ABB.Robotics.RobotStudio.ScreenRecorder.StopTime"/> properties.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.GetCompressors(ABB.Robotics.RobotStudio.ScreenRecorderFileFormat)">
            <summary>
            Returns information about installed and available compressors (codecs)
            for a given file format.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Selection">
            <summary>
            Provides access to a collection containing all selected objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Selection.SelectedObjects">
            <summary>
            Returns the collection containing all selected objects.
            </summary> 
            <value>
            This collection provides information and events about selected objects and makes it possible to select objects.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Selection.#ctor">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Solution">
            <summary>
            A Solution represents a project structure with associated station and documents.
            </summary>
            <remarks>
            This is called <b>Project</b> in the RobotStudio UI, not to be confused with <see cref="T:ABB.Robotics.RobotStudio.Project"/>
            which is the base class for Station and GraphicComponentLibrary.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Solution.ActiveSolutionFolder">
            <summary>
            Returns the path to the active solution directory, or null if no solution is active.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Solution.ActiveSolutionFolderChanged">
            <summary>
            Raised when the <see cref="P:ABB.Robotics.RobotStudio.Solution.ActiveSolutionFolder"/> property has changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Solution.ActiveSolutionPath">
            <summary>
            Returns the path to the active solution (.rssln/.rsproj) file, or null if no solution is active.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Solution.ContainingSolutionPath(System.String)">
            <summary>
            Returns the path to the solution (if any) that contains the project with a specified path.
            </summary>
            <param name="projectPath">Path to a project file.</param>
            <returns>Path to solution file</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Solution.Create(System.String,System.String)">
            <summary>
            Creates a new solution structure in the specified folder.
            </summary>
            <param name="folder">Path to the solution folder</param>
            <param name="name">Name of the solution file</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Solution.Create(System.String,System.String,ABB.Robotics.RobotStudio.ProjectFormat)">
            <summary>
            Creates a new solution structure in the specified folder.
            </summary>
            <param name="folder">Path to the solution folder</param>
            <param name="name">Name of the solution file</param>
            <param name="format">Format of the station to be stored in the solution. This decides the name of certain subfolders.</param>
            <remarks>
            New projects should use <see cref="F:ABB.Robotics.RobotStudio.ProjectFormat.Folder"/>.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Solution.IsSolutionFolder(System.String)">
            <summary>
            Checks if a folder is a solution folder.
            </summary>
            <param name="folder">Path to a folder.</param>
            <returns>True if the folder is a solution folder.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Solution.IsSolutionFile(System.String)">
            <summary>
            Checks if a file is a solution file.
            </summary>
            <param name="fileName">File name or full path.</param>
            <returns>True if the file is a solution file.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.ToolControlServices">
            <summary>
            Provides methods for showing a <see cref="T:System.Windows.Forms.Control"/> in the a singleton tool window.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.ToolControlServices.TearOff">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.ShowToolControl(System.Windows.Forms.Control,System.String,System.String[])">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.Control"/> in the tool window.
            </summary>
            <param name="toolControl">Control to show.</param>
            <param name="helpID">Help ID for the control</param>
            <param name="tabVisibility">IDs of ribbon tabs for which the control should be visible.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.TearOffActiveToolControl">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.CloseActiveToolControl">
            <summary>
            Closes the active tool control and removes the tool window.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.CloseActiveToolControl(System.Boolean)">
            <summary>
            Closes the active tool control and optionally removes the tool window.
            </summary>
            <param name="hideWindow">
            Pass false to retain the tool control window in order to reduce flicker.
            </param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.UndoContext">
            <summary>
            Gives access to a state based undo mechanism for <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />s. Each <see cref="T:ABB.Robotics.RobotStudio.Project" /> has its own undo context.
            The undo context makes it possible to group changes to <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />s. All changes in the group can then be undone and redone.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.CanUndo">
            <summary>
            Returns true if there are entries in the Undo queue, otherwise false.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.CanRedo">
            <summary>
            Returns true if there are entries in the Redo queue, otherwise false.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.NumUndoSteps">
            <summary>
            Returns the number of available Undo steps
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.NumRedoSteps">
            <summary>
            Returns the number of available Redo steps
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.IsInUndoStep">
            <summary>
            Returns true if the application is currently inside an undo step.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.QueueSize">
            <summary>
            Gets or sets the maximum size for the Undo and Redo queues.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.CurrentUndoStepName">
            <summary>
            Gets or sets the name of the current undo step
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.UndoContext.IsAppending">
            <summary>
            Returns true if the active undo step has been opened using AppendToUndoStep()
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.UndoContext.Redone">
            <summary>
            Occurs after a redo operation.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.UndoContext.Redoing">
            <summary>
            Occurs before a redo operation.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.UndoContext.Undone">
            <summary>
            Occurs after an undo operation.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.UndoContext.Undoing">
            <summary>
            Occurs before an undo operation. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.Clear">
            <summary>
            Clears the Undo and Redo queues.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.Undo">
            <summary>
            Undoes the operations made during the last undo step.
            </summary>
            <remarks>
            It is not legal to call this method while inside an undo step.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.Redo">
            <summary>
            Redoes the changes undone by the last call to Undo()
            </summary>
            <remarks>
            It is not legal to call this method while inside an undo step.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep">
            <summary>
            Starts a new unnamed undo step.
            </summary>
            <remarks>
            It is not recommended to make unnamed undo steps. Use BeginUndoStep(string name) instead.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep(System.String)">
            <summary>
            Begins a new undo step.
            </summary>
            <param name="name">The name of the undo step.</param>
            <remarks>
            The name should be localized, since it will be displayed in the user interface.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.AppendToUndoStep(System.String)">
            <summary>
            Similar to <see cref="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep(System.String)" />, but tries to append changes to the previous
            undo step, instead of creating a new one.
            </summary>
            <remarks>
            The name must match the name of the previous undo step. Otherwise a new undo step one will be created.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.AppendToUndoStep(System.String,System.Boolean)">
            <summary>
            Similar to <see cref="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep(System.String)" />, but tries to append changes to the previous
            undo step, instead of creating a new one.
            </summary>
            <param name="name">Name of undo step, if a new one is created.</param>
            <param name="forceAppend">If true, changes are appended to the previous undostep (if one exists) even if the names do not match.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.EndUndoStep">
            <summary>
            Ends the current undo step.
            </summary>
            <remarks>
            It is legal to make nested calls to Begin/EndUndoStep(). Only the outermost EndUndoStep()
            call will actually close the undo step.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.CancelUndoStep(ABB.Robotics.RobotStudio.CancelUndoStepType)">
            <summary>
            Marks the current undo step as canceled.
            </summary>
            <remarks>
            When the canceled undo step is closed by EndUndoStep(), either all changes will be
            undone ("rollback"), or the undo/redo queues will be cleared, depending on the value
            of 'cancelType'.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.ExecuteUndoStep(System.String,System.Action)">
            <summary>
            Creates an undo step and executes the code in the passed in delegate inside it.
            </summary>
            <remarks>
            In case of an exception, the undo step will be rolled back and the error will be logged to the RobotStudio output window.
            </remarks>
            <returns>
            True if the operation succeeded, false if an exception was thrown.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.ExecuteUndoStep(System.String,System.Action,System.Action{System.Exception})">
            <summary>
            Creates an undo step and executes the code in the passed in delegate inside it.
            </summary>
            <remarks>
            In case of an exception, the passed in errorHandler delegate will be executed.
            </remarks>
            <returns>
            True if the operation succeeded, false if an exception was thrown.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.ExecuteAppendUndoStep(System.String,System.Action)">
            <summary>
            Creates or appends to an undo step and executes the code in the passed in delegate inside it.
            </summary>
            <remarks>
            The name must match the name of the previous undo step. Otherwise a new undo step one will be created.
            In case of an exception, the undo step will be rolled back and the error will be logged to the RobotStudio output window.
            </remarks>
            <returns>
            True if the operation succeeded, false if an exception was thrown.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.GetUndoNames">
            <summary>
            Returns an array of the names of all undo steps in the undo queue
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.GetRedoNames">
            <summary>
            Returns an array of the names of all redo steps in the redo queue
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.AddChange(ABB.Robotics.RobotStudio.IChange)">
            <summary>
            Adds an undoable operation (see <see cref="T:ABB.Robotics.RobotStudio.IChange"/>).
            </summary>
            <param name="change"></param>
            <remarks>
            If an undo step is not currently open, the change will be added to the previous undo step.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.SuspendUndoStep">
            <summary>
            Temporarily disables collection of undoable changes.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.UndoContext.ResumeUndoStep">
            <summary>
            Resumes collection of undoable changes.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Internal.AsyncEventHandler">
            <summary>
            Represents an asynchronous event handler.
            </summary>
            <param name="sender">The object firing the event.</param>
            <param name="eventArgs">The object containing the event data.</param>
            <returns>A task that completes when this handler is done handling the event.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Internal.AsyncEventHandler`1">
            <summary>
            Represents an asynchronous event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="sender">The object firing the event.</param>
            <param name="eventArgs">The object containing the event data.</param>
            <returns>A task that completes when this handler is done handling the event.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Internal.AsyncExtensions">
            <summary>
            Provides extension methods for use with <see cref="T:ABB.Robotics.RobotStudio.Internal.AsyncEventHandler" /> and
            <see cref="T:ABB.Robotics.RobotStudio.Internal.AsyncEventHandler`1" />, as well as functions to convert synchronous event handlers to
            asynchronous event handlers.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Internal.AsyncExtensions.MakeAsync(System.EventHandler)">
            <summary>
            Converts a synchronous event handler to an asynchronous event handler that performs the same actions and returns
            <see cref="P:System.Threading.Tasks.Task.CompletedTask" />.
            </summary>
            <param name="eventHandler">The synchronous event handler.</param>
            <returns>An asynchronous event handler that performs the same logic and returns a completed task.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Internal.AsyncExtensions.MakeAsync``1(System.EventHandler{``0})">
            <summary>
            Converts a synchronous event handler to an asynchronous event handler that performs the same actions and returns
            <see cref="P:System.Threading.Tasks.Task.CompletedTask" />.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The synchronous event handler.</param>
            <returns>An asynchronous event handler that performs the same logic and returns a completed task.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Internal.AsyncExtensions.InvokeAsync(ABB.Robotics.RobotStudio.Internal.AsyncEventHandler,System.Object,System.EventArgs)">
            <summary>
            Asynchronously invokes an event, dispatching the provided event arguments to all registered handlers.
            </summary>
            <param name="eventHandler">This event handler.</param>
            <param name="sender">The object firing the event.</param>
            <param name="eventArgs">The object containing the event data.</param>
            <returns>
            A task that completes only when all registered handlers complete. A completed task is returned if the event handler is
            null.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Internal.AsyncExtensions.InvokeAsync``1(ABB.Robotics.RobotStudio.Internal.AsyncEventHandler{``0},System.Object,``0)">
            <summary>
            Asynchronously invokes an event, dispatching the provided event arguments to all registered handlers.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">This event handler.</param>
            <param name="sender">The object firing the event.</param>
            <param name="eventArgs">The object containing the event data.</param>
            <returns>A task that completes only when all registered handlers complete.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_degreePerSecond">
            <summary>
              Looks up a localized string similar to deg/s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_degreePerSecond2">
            <summary>
              Looks up a localized string similar to deg/s².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_degrees">
            <summary>
              Looks up a localized string similar to deg.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_feet">
            <summary>
              Looks up a localized string similar to ft.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_feet2">
            <summary>
              Looks up a localized string similar to ft².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_feet3">
            <summary>
              Looks up a localized string similar to ft³.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_feetPerSecond">
            <summary>
              Looks up a localized string similar to ft/s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_feetPerSecond2">
            <summary>
              Looks up a localized string similar to ft/s².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_gravities">
            <summary>
              Looks up a localized string similar to g.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_inch">
            <summary>
              Looks up a localized string similar to in.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_inch2">
            <summary>
              Looks up a localized string similar to in².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_inch3">
            <summary>
              Looks up a localized string similar to in³.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_inchPerSecond">
            <summary>
              Looks up a localized string similar to in/s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_inchPerSecond2">
            <summary>
              Looks up a localized string similar to in/s².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_joule">
            <summary>
              Looks up a localized string similar to J.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_kg">
            <summary>
              Looks up a localized string similar to Kg.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_kgmeter2">
            <summary>
              Looks up a localized string similar to kgm².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_megaPascal">
            <summary>
              Looks up a localized string similar to MPa.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_meter">
            <summary>
              Looks up a localized string similar to m.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_meter2">
            <summary>
              Looks up a localized string similar to m².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_meter3">
            <summary>
              Looks up a localized string similar to m³.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_meterPerSecond">
            <summary>
              Looks up a localized string similar to m/s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_meterPerSecond2">
            <summary>
              Looks up a localized string similar to m/s².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_millimeter">
            <summary>
              Looks up a localized string similar to mm.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_millimeter2">
            <summary>
              Looks up a localized string similar to mm².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_millimeter3">
            <summary>
              Looks up a localized string similar to mm³.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_millimeterPerSecond">
            <summary>
              Looks up a localized string similar to mm/s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_millimeterPerSecond2">
            <summary>
              Looks up a localized string similar to mm/s².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_newton">
            <summary>
              Looks up a localized string similar to N.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_newtonMeter">
            <summary>
              Looks up a localized string similar to Nm.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_newtonPerDegree">
            <summary>
              Looks up a localized string similar to N/deg.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_newtonPerMeter">
            <summary>
              Looks up a localized string similar to N/m.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_newtonPerRadian">
            <summary>
              Looks up a localized string similar to N/rad.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_none">
            <summary>
              Looks up a localized string similar to Unspecified.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_pascal">
            <summary>
              Looks up a localized string similar to Pa.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_QuarternionRotation">
            <summary>
              Looks up a localized string similar to rotation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_quaternion">
            <summary>
              Looks up a localized string similar to none.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_radianPerSecond">
            <summary>
              Looks up a localized string similar to rad/s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_radianPerSecond2">
            <summary>
              Looks up a localized string similar to rad/s².
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_radians">
            <summary>
              Looks up a localized string similar to rad.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_second">
            <summary>
              Looks up a localized string similar to s.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Resources.Unit_watt">
            <summary>
              Looks up a localized string similar to W.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.SolutionFolders">
            <summary>
            Defines well-known folder names in a <see cref="T:ABB.Robotics.RobotStudio.Solution"/>.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.DistributionPackage.AddError(System.String)">
            <summary>
            For showing info in the browser if the package contains errors.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ExtensionManagement.DistributionPackage.RestartRequired">
            <summary>
            Indicates that RS must be restarted to "activate" the package.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.DistributionPackage.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{RobotStudio.API.Internal.ExtensionManagement.PackageComponent},System.String,System.Xml.Linq.XDocument,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor is only for unit tests
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.DistributionPackage.FromLibrarySource(System.String)">
            <summary>
            Generate a DistributionPackage from a directory in the RobotStudio-LibrarySource repo, for testing while authoring a package.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.ExtensionManagement.DistributionPackageDocumentTypes">
            <summary>
            Known distribution package document types
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.Packages">
            <summary>
            Returns an immutable copy of the package collection.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.PackagesLatestVersion">
            <summary>
            Returns an immutable list containing the latest versioned package per package id. 
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.CreateRspakAsync(RobotStudio.API.Internal.ExtensionManagement.DistributionPackage,System.String)">
            <summary>
            Creates an .rspak file from a distribution package
            </summary>
            <param name="distributionPackage">The package to be turned into an .rspak file</param>
            <param name="targetDirectory">The directory where the .rspak file will be put</param>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.InstallPackage(System.String,System.Action{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Installs a zipped distribution package (.rspak) from a url to a local location
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.GetComponentsByType(RobotStudio.API.Internal.ExtensionManagement.PackageComponentType)">
            <summary>
            Returns components by type.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.GetComponentsByType(RobotStudio.API.Internal.ExtensionManagement.PackageComponentType,System.Boolean)">
            <summary>
            Returns components by type, optionally filtering on package name and using only the latest version.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.GetComponentsByType(RobotStudio.API.Internal.ExtensionManagement.PackageComponentType,System.String)">
            <summary>
            Returns components by type and subtype.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ExtensionManagement.ExtensionManager.InstallPackageForComponent">
            <summary>
            Callback for finding and installing a (RobotWare) distribution package based on a component name ("id_version")
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ApiConfiguration.MajorVersion">
            <summary>
            Gets an identifier that is unique for this version with regards to side-by-side installation.
            Used for file/directory names, registry hives etc. Currently "2022"
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ApiConfiguration.ShowPrerelaseContent">
            <summary>
            Show pre-release content from backend services. Defaults to true for non-production builds.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ApiConfiguration.LocalAppDataDirectory">
            <summary>
            Returns the local (per-user) app data directory for this product
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ApiConfiguration.CopyFileFromLegacyAppData(System.String,System.Boolean)">
            <summary>
            Copies a file from the old appdata location if it does not exist in the new location.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ApiExtensionMethods.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Recursive traversal
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ApiExtensionMethods.WithCancellation(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            For awaiting a Task while throwing an OperationCanceledException if the CancellationToken is cancelled.
            </summary>
            <remarks>
            https://stackoverflow.com/questions/25632803/how-to-transform-task-waitcancellationtoken-to-an-await-statement
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Internal.ApiExtensionMethods.WithCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            For awaiting a Task while throwing an OperationCanceledException if the CancellationToken is cancelled.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ApiExtensionMethods.Observe(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Safely awaits a task, logging any exception.
            </summary>
            <param name="task"></param>
            <param name="visibleException"></param>
        </member>
        <member name="M:RobotStudio.API.Internal.ApiExtensionMethods.Get(ABB.Robotics.RobotStudio.AttributeCollection,System.String)">
            <summary>
            Like [] but doesn't throw exception if key does not exist.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.AsyncValueUpdater`1">
            <summary>
            Asynchronously updates an underlying value. Guarantees that the last set value will get 
            commited to the underlying function. Not threadsafe.
            </summary>
            <typeparam name="T">Type of the underlying value.</typeparam>
        </member>
        <member name="T:RobotStudio.API.Internal.DataRecorderSignalDataTree`2">
            <summary>
            Binary search tree for a signal
            </summary>
            <typeparam name="T">Signal data type (float, bool, string)</typeparam>
            <typeparam name="U">Node-data for the given data type</typeparam>
        </member>
        <member name="T:RobotStudio.API.Internal.DelayedUpdate">
            <summary>
            This class is intended to improve UI performance by reducing the number of times
            a time consuming update is performed. The update is performed with a minimum interval
            (which can be automatically adjusted) no matter how often Update() is called.
            It also ensures there is no reentrancy.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.DelayedUpdate.Delay">
            <summary>
            Delay/interval in milliseconds.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.DelayedUpdate.Update">
            <summary>
            Perform the update.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.DelayedUpdate.CancelUpdate">
            <summary>
            Cancels any pending update. Make sure to call this when the UI is disposed!
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExceptionHelper.LogException(System.Exception,System.String)">
            <summary>
            Logs an exception to the ErrorLogs directory similarly to UsageLogger. For use by other apps than RobotStudio.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExceptionHelper.WriteException(System.Text.StringBuilder,System.Exception)">
            <summary>
            Writes all the exception info to a StringBuilder.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ExtensionMethods.SyncFrom``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Syncs a source collection to a target collection without clearing it first.
            </summary>
            <remarks>
            Useful for e.g. a databound list box where you don't want to lose
            selection when you update the contents.
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.AllowAllUserAccess(System.String)">
            <summary>
            Sets all permissions to the users group for a file.
            Use for files that must be modifiable by other users than the creator,
            such as files in AppConfiguration.CommonAppDataDirectory
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.FindFile(System.String,System.String)">
            <summary>
            Returns the 'last' (e.g. highest numbered) file that matches directory\pattern with wildcards
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.FixFileName(System.String,System.String)">
            <summary>
            Removes invalid characters from a filename
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.IsNetworkPath(System.String)">
            <summary>
            Returns true if the specified path is a network location.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.GetTempDirectory">
            <summary>
            Creates an empty directory inside TEMP
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.MoveDirectoryContentsAndCreateSymbolicLink(System.String,System.String)">
            <summary>
            Moves all contents of a directory to a new location and replaces it with a reparse point.
            </summary>
            <remarks>
            MUST be run with elevated privileges!
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.MoveDirectoryContents(System.String,System.String)">
            <summary>
            Recursively moves all content with no overwrite. Both locations must be on the same volume.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileServices.ComputeFileHash(System.String,System.Boolean)">
            <summary>
            Computes a hash for a file using SHA256. The value is cached and recomputed only if the file write time has changed.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileTemplateManager.AddTemplateDirectory(System.String)">
            <summary>
            Adds a directory that will be scanned for template files.
            </summary>
            <remarks>
            RobotStudio will scan both the given directory and the sub-directory with the same name as the identitifer for the 
            current language. If a sub-directory for the given language does not exist, the english ("en") sub-directory will be scanned.
            If a directory does not exist it will be ignored.
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Internal.FileTemplate.FileName">
            <summary>
            File name without extension
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.FileTemplate.TypeName">
            <summary>
            Localized short name used for creating file name, e.g. "New XXX"
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.FileTemplate.Caption">
            <summary>
            Localized descriptive name
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.FileTemplate.ParseVersion(System.String,System.Int32)">
            <summary>
            Purpose is to create a Version object without undefined values (-1).
            </summary>
            <param name="version">Version string with "." separator.</param>
            <param name="undefinedNumber">Specifies a number to exchange undefined values with.</param>
            <returns>System.Version</returns>
        </member>
        <member name="T:RobotStudio.API.Internal.GenericCollection`1">
            <summary>
            Collection wrapper for CmList that can be used for ProjectObjects and other types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:RobotStudio.API.Internal.HiResTimer.Tick">
            <summary>
            Raised on the provided sync ctx or on a worker thread
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ListSlice`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Do not call this directly. Use a factory method on <see cref="T:RobotStudio.API.Internal.ListSlice"/> instead.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.PriorityScheduler">
            <summary>
            Support for running Tasks at a custom priority
            </summary>
            <remarks>
            See https://stackoverflow.com/questions/3836584/lowering-priority-of-task-factory-startnew-thread
            </remarks>
        </member>
        <member name="T:RobotStudio.API.Internal.QuantityEx">
            <summary>
            Wrapper for the ABB.Robotics.RobotStudio.Quantity class.
            This wrapper handles events and fires PropertyChanged events when appropiate so this
            class can be used in a WPF application.
            </summary>
            <remarks>
            Unfortunately Quantity is a sealed class so we can't just inherit from it
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Internal.QuantityEx.Name">
            <summary>
            Gets the identifier string of the Quantity.
            </summary>
            <value>
            The identifier string.
            </value>
        </member>
        <member name="P:RobotStudio.API.Internal.QuantityEx.MeasuringUnits">
            <summary>
            Gets a MeasuringUnitCollection object that represents all the measuring units that
            belongs to this Quantity.
            </summary>
            <value>
            The MeasuringUnitCollection object that represents all the measuring units that
            belongs to this Quantity.
            </value>
        </member>
        <member name="P:RobotStudio.API.Internal.QuantityEx.ActiveMeasuringUnit">
            <summary>
            Gets or sets the MeasuringUnit that is currently active on this Quantity.
            </summary>
            <value>
            A cref="ApplicationAPI.MeasuringUnit" representing the active measuring unit on this Quantity.
            </value>
        </member>
        <member name="P:RobotStudio.API.Internal.QuantityEx.HeaderStringFormat">
            <summary>
            Returns "{0} (displayname)"
            </summary>
        </member>
        <member name="E:RobotStudio.API.Internal.QuantityEx.ActiveMeasuringUnitChanged">
            <summary>This event is fired when the active measuring unit of this quantity has changed.</summary>
        </member>
        <member name="M:RobotStudio.API.Internal.RegexHelper.Match(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Matches the input string using replacements {name} and wildcards *
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ScreenGrabber.Record">
            <summary>
            Runs on a worker thread.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ScreenGrabber.AddBitmap(System.Drawing.Bitmap)">
            <summary>
            Thread safe way of adding a bitmap manually.
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:RobotStudio.API.Internal.ScreenGrabber.GetFrame">
            <summary>
            Adds a screenshot of the window specified in Start() to the current recording.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.SemanticVersion">
            <summary>
            See https://semver.org/spec/v2.0.0.html
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.TestProject">
            <summary>
            Used by unit tests
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.UsageLogger.LogCommand(System.String)">
            <summary>
            Log a command that is not a CommandBarControl. Id should be unique.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.WebHelper">
            <summary>
            Utility methods to work with web/internet resources
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.WebHelper.Url">
            <summary>
            URLs to all web resources used by RoboStudio
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.WebHelper.ReportDownload(System.String)">
            <summary>
            Increase the download count for a CDN file.
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:RobotStudio.API.Internal.RobotStudioUrl">
            <summary>
            Keeps track of all internet URLs used by RobotStudio, updating them as needed from services.robotstudio.com
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.PersistentAttribute">
            <summary>
            Attribute applied to persistent classes and fields
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.PersistentAttribute.PersistentName">
            <summary>
            Persistent name (as can be found in PIM.xml) for this item
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.PersistentAttribute.ExternalType">
            <summary>
            The public type that this internal type should be mapped/converted to
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.PersistentAttribute.OldName">
            <summary>
            Alternative (obsolete) name in PIM. Works for both classes and fields.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.PersistentAttribute.PersistAs">
            <summary>
            Persist as attribute instead of element. Valid for primitive types/enums/string/ProjectObject.
            Currently only used for unpacked format.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.NonPersistentAttribute">
            <summary>
            Attribute applied to ProjectObject types that should not be persisted (e.g. Body)
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.NonPersistentAttribute.Recursive">
            <summary>
            Specifies if the internal children should also be excluded
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.PersistentStreamAttribute.Compress">
            <summary>
            Compress stream when using unpacked format. .zip will be added to filename.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.UndoableAttribute">
            <summary>
            Attribute applied to any field that should be restored after an UNDO/REDO
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.ChangeNotificationManager">
            <summary>
            Manages state change subscriptions and notifications
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.CmList`1">
            <summary>
            List implementation supporting persistence and UNDO
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.CmList`1.InternalList">
            <summary>
            Only for use by Undo and Persistence systems
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.CmList`1.Add(`0,ABB.Robotics.RobotStudio.CollectionConflictPolicy)">
            <summary>
            Add with policy. Only valid for ProjectObjects.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.CmList`1.Add(`0,ABB.Robotics.RobotStudio.CollectionConflictPolicy,System.Predicate{`0})">
            <summary>
            Add with policy.
            </summary>
            <param name="item"></param>
            <param name="policy"></param>
            <param name="pred">Should return true for input that is equal to item</param>
        </member>
        <member name="P:RobotStudio.API.Core.CmMap`2.InternalDictionary">
            <summary>
            Only for use by the Undo and Persistence systems
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.DeleteChange">
            <summary>
            'Dummy' change used to dispose an object when it falls off the undo queue.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Core.UndoDeltaState">
            <summary>
            Represents a single UNDO step
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoDeltaState.AddChange(RobotStudio.API.Core.IUndoChange)">
            <summary>
            Adds a change to an open delta state
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.UndoDeltaState.Changes">
            <summary>
            Returns a list of all changes in the delta state
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoDeltaState.Redo">
             <summary>
             Redoes a previously undone delta state.
             </summary>
             <remarks>
            		Pre-condition:	CanRedo() == true
            						CanUndo() == false
            
            		Post-condition:	CanRedo() == false
            						CanUndo() == (true or false)
             </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoDeltaState.Undo">
            <summary>
            Undoes a delta state.
            </summary>
            <remarks>
            Pre-condition:	CanRedo() == false
            				CanUndo() == true
            
            Post-condition:	CanRedo() == (true or false)
            				CanUndo() == false
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoDeltaState.Close">
            <summary>
            Closes the delta state
            </summary>
            <remarks>
            No more changes should be added after this call. 
            Will in turn call OnCloseDeltaState() in all changes.
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoDeltaState.Reopen">
            <summary>
            Reopens a closed deltastate so that more changes can be appended to it.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.DeltaStateNum">
            <summary>
            Returns the numeric id of the current (or last, if no current) deltastate
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.Clear">
            <summary>
            Clears the UNDO and REDO queues
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.ClearRedoQueue">
            <summary>
            Clears the REDO queue
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.ClearUndoQueue">
            <summary>
            Clears the UNDO queue
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.Redo">
            <summary>
            Redoes a previously undone delta state
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.Undo">
            <summary>
            Undoes the last delta state
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.BeginDeltaState(System.String)">
            <summary>
            Starts a new delta state
            </summary>
            <remarks>
            It is legal to call this method when a delta state is 
            already open. The number of calls to BeginDeltaState() and
            EndDeltaState() must match, however.
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.AppendDeltaState(System.String,System.Boolean)">
            <summary>
            Tries to "reopen" the last delta state, appending changes to it
            </summary>
            <remarks>
            If a description is not null, it must match the name of the previous deltastate,
            otherwise a new deltastate will be created.
            If there is no previous deltastate, a new one will be created (and aborted, so 
            the queue will be empty after it has been closed)
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.EndDeltaState">
            <summary>
            Ends the current delta state
            </summary>
            <remarks>
            There should be exacly the same number of calls to BeginDeltaState() 
            and EndDeltaState().
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.AbortDeltaState(System.Boolean)">
            <summary>
            Aborts the current delta state
            </summary>
            <param name="clear">true if the queues should be cleared when the delta state is closed</param>
            <remarks>
            This call just sets an abort flag; EndDeltaState() must
            still be called to actually close the delta state. After
            the delta state is closed, it will be rolled back(undone).
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.AddChange(RobotStudio.API.Core.IUndoChange)">
            <summary>
            Adds a change to the current delta state
            </summary>
            <remarks>
            If there is no current delta state, the system will add it
            to the previous delta state, or otherwise throw
            it away.
            </remarks>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.DeleteDeltaState(RobotStudio.API.Core.UndoDeltaState)">
            <summary>
            Deletes a delta state
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.CloseDeltaState(RobotStudio.API.Core.UndoDeltaState)">
            <summary>
            Closes a delta state
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.PushFrontUndoQueue(RobotStudio.API.Core.UndoDeltaState)">
            <summary>
            Adds a delta state to the front of the undo queue
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.PopBackUndoQueue">
            <summary>
            Removes a delta state from the back of the undo queue
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.Shutdown">
            <summary>
            Shuts down the UNDO Manager
            </summary>
            <remarks>
            After shutdown, no more delta states can be created.
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.NumUndoSteps">
            <summary>
            Returns the number of available UNDO steps
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.NumRedoSteps">
            <summary>
            Returns the number of available REDO steps
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.CanUndo">
            <summary>
            Returns if it is currently possible to UNDO
            </summary>
            <remarks>
            The property will return true if (1) there is something
            in the UNDO queue, and (2) there is no open deltastate.
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.CanRedo">
            <summary>
            Returns if it is currently possible to REDO
            </summary>
            <remarks>
            The property will return true if (1) there is something
            in the REDO queue, and (2) there is no open deltastate.
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.State">
            <summary>
            Retusn the current state of the UndoManager
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.GetUndoDescriptions">
            <summary>
            Returns the descriptions of all DeltaStates in the UNDO list
            </summary>
        </member>
        <member name="M:RobotStudio.API.Core.UndoManager.GetRedoDescriptions">
            <summary>
            Returns the descriptions of all DeltaStates in the REDO list
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.QueueSize">
            <summary>
            Gets or sets the maximum number of deltastates in the undo/redo lists
            </summary>
        </member>
        <member name="P:RobotStudio.API.Core.UndoManager.CurrentDeltaStateDescription">
            <summary>
            Gets or sets the description for the currently open deltastate
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.ArrayStream`1">
            <summary>
            Base class for saving large arrays in a stream rather than in xml
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RobotStudio.API.Persistence.ArrayStream`1.ItemSize">
            <summary>
            Persisted size of items, in bytes
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.CompletingStream">
            <summary>
            Workaround for new stream behavior in .NET 6. 
            See https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.PimDocument">
            <summary>
            Represents the persistent representation of an object model hierarchy
            </summary>
        </member>
        <member name="M:RobotStudio.API.Persistence.PimDocument.#ctor">
            <summary>
            Used by Load() to create the PimDocument instance
            </summary>
        </member>
        <member name="P:RobotStudio.API.Persistence.PimDocument.TotalSize">
            <summary>
            Total size of a loaded document, including referenced documents
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.PimDocumentManager">
            <summary>
            Manages all open PimDocuments as well as app global registrations needed to support persistence
            </summary>
        </member>
        <member name="M:RobotStudio.API.Persistence.PimDocumentManager.AddPathMapping(System.String,System.String)">
            <summary>
            Register a location (such as the ABB library) with a well known name so that 
            referred documents can be more easily located on different machines
            </summary>
            <param name="mapping"></param>
            <param name="path"></param>
        </member>
        <member name="M:RobotStudio.API.Persistence.PimFileFormatChecker.GetFileFormat(System.IO.Stream)">
            <summary>
            Checks the file format of the specified PIM document.
            </summary>
            <remarks>
            Only checks the first two bytes, so false positives are possible 
            if you feed it a file that is neither zip nor structured storage.
            Will always work for valid PIM docs though.
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Persistence.IStreamedObjectEx.ForceSave">
            <summary>
            Save this instance even if <see cref="P:RobotStudio.API.Persistence.PimTypeInfo.StreamEnabled"/> is false.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.PimStorage">
            <summary>
            Wraps all Structured Storage-related functionality
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.PimTypeInfo">
            <summary>
            Extended type/mapping information about a persistable type
            </summary>
        </member>
        <member name="T:RobotStudio.API.Persistence.PimObjectCreate">
            <summary>
            Delegate for object factory
            </summary>
        </member>
        <member name="M:RobotStudio.API.Persistence.PimTypeManager.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers all persistent type in the given assembly, based on [Persistent] attribute usage
            </summary>
        </member>
        <member name="M:RobotStudio.API.Persistence.PimTypeManager.RegisterObjectCreator(System.String,RobotStudio.API.Persistence.PimObjectCreate)">
            <summary>
            Allows the addition of custom object factories for special cases not handled by the
            default mechanism
            </summary>
        </member>
    </members>
</doc>
